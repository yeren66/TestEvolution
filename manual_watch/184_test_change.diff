--- 
+++ 
@@ -28,7 +28,7 @@
 import org.apache.commons.math4.legacy.exception.NotPositiveException;
 import org.apache.commons.math4.legacy.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.legacy.exception.NumberIsTooSmallException;
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -112,8 +112,8 @@
             DerivativeStructure y    = f.value(dsX);
             Assert.assertEquals(f.value(dsX.getValue()), f.value(dsX).getValue(), 1.0e-15);
             for (int order = 0; order <= yRef.getOrder(); ++order) {
-                maxError[order] = FastMath.max(maxError[order],
-                                        FastMath.abs(yRef.getPartialDerivative(order) -
+                maxError[order] = AccurateMath.max(maxError[order],
+                                        AccurateMath.abs(yRef.getPartialDerivative(order) -
                                                      y.getPartialDerivative(order)));
             }
         }
@@ -137,11 +137,11 @@
             DerivativeStructure yGood = goodStep.value(dsX);
             DerivativeStructure yBad  = badStep.value(dsX);
             for (int order = 0; order <= 6; ++order) {
-                maxErrorGood[order] = FastMath.max(maxErrorGood[order],
-                                                   FastMath.abs(yRef.getPartialDerivative(order) -
+                maxErrorGood[order] = AccurateMath.max(maxErrorGood[order],
+                                                   AccurateMath.abs(yRef.getPartialDerivative(order) -
                                                                 yGood.getPartialDerivative(order)));
-                maxErrorBad[order]  = FastMath.max(maxErrorBad[order],
-                                                   FastMath.abs(yRef.getPartialDerivative(order) -
+                maxErrorBad[order]  = AccurateMath.max(maxErrorBad[order],
+                                                   AccurateMath.abs(yRef.getPartialDerivative(order) -
                                                                 yBad.getPartialDerivative(order)));
             }
         }
@@ -276,17 +276,17 @@
         UnivariateDifferentiableFunction sqrt = differentiator.differentiate(new UnivariateFunction() {
             @Override
             public double value(double x) {
-                return FastMath.sqrt(x);
+                return AccurateMath.sqrt(x);
             }
         });
 
         // we are able to compute derivative near 0, but the accuracy is much poorer there
         DerivativeStructure t001 = new DerivativeStructure(1, 1, 0, 0.01);
-        Assert.assertEquals(0.5 / FastMath.sqrt(t001.getValue()), sqrt.value(t001).getPartialDerivative(1), 1.6);
+        Assert.assertEquals(0.5 / AccurateMath.sqrt(t001.getValue()), sqrt.value(t001).getPartialDerivative(1), 1.6);
         DerivativeStructure t01 = new DerivativeStructure(1, 1, 0, 0.1);
-        Assert.assertEquals(0.5 / FastMath.sqrt(t01.getValue()), sqrt.value(t01).getPartialDerivative(1), 7.0e-3);
+        Assert.assertEquals(0.5 / AccurateMath.sqrt(t01.getValue()), sqrt.value(t01).getPartialDerivative(1), 7.0e-3);
         DerivativeStructure t03 = new DerivativeStructure(1, 1, 0, 0.3);
-        Assert.assertEquals(0.5 / FastMath.sqrt(t03.getValue()), sqrt.value(t03).getPartialDerivative(1), 2.1e-7);
+        Assert.assertEquals(0.5 / AccurateMath.sqrt(t03.getValue()), sqrt.value(t03).getPartialDerivative(1), 2.1e-7);
 
     }
 
@@ -300,7 +300,7 @@
 
             @Override
             public double[] value(double x) {
-                return new double[] { FastMath.cos(x), FastMath.sin(x) };
+                return new double[] { AccurateMath.cos(x), AccurateMath.sin(x) };
             }
 
         });
@@ -308,8 +308,8 @@
         for (double x = -10; x < 10; x += 0.1) {
             DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x);
             DerivativeStructure[] y = f.value(dsX);
-            double cos = FastMath.cos(x);
-            double sin = FastMath.sin(x);
+            double cos = AccurateMath.cos(x);
+            double sin = AccurateMath.sin(x);
             double[] f1 = f.value(dsX.getValue());
             DerivativeStructure[] f2 = f.value(dsX);
             Assert.assertEquals(f1.length, f2.length);
@@ -337,8 +337,8 @@
             @Override
             public double[][] value(double x) {
                 return new double[][] {
-                    { FastMath.cos(x),  FastMath.sin(x)  },
-                    { FastMath.cosh(x), FastMath.sinh(x) }
+                    { AccurateMath.cos(x),  AccurateMath.sin(x)  },
+                    { AccurateMath.cosh(x), AccurateMath.sinh(x) }
                 };
             }
 
@@ -347,10 +347,10 @@
         for (double x = -1; x < 1; x += 0.02) {
             DerivativeStructure dsX = new DerivativeStructure(1, 2, 0, x);
             DerivativeStructure[][] y = f.value(dsX);
-            double cos = FastMath.cos(x);
-            double sin = FastMath.sin(x);
-            double cosh = FastMath.cosh(x);
-            double sinh = FastMath.sinh(x);
+            double cos = AccurateMath.cos(x);
+            double sin = AccurateMath.sin(x);
+            double cosh = AccurateMath.cosh(x);
+            double sinh = AccurateMath.sinh(x);
             double[][] f1 = f.value(dsX.getValue());
             DerivativeStructure[][] f2 = f.value(dsX);
             Assert.assertEquals(f1.length, f2.length);
@@ -397,8 +397,8 @@
                for (int xOrder = 0; xOrder <= sRef.getOrder(); ++xOrder) {
                    for (int yOrder = 0; yOrder <= sRef.getOrder(); ++yOrder) {
                        if (xOrder + yOrder <= sRef.getOrder()) {
-                           maxError[xOrder +yOrder] = FastMath.max(maxError[xOrder + yOrder],
-                                                                    FastMath.abs(sRef.getPartialDerivative(xOrder, yOrder) -
+                           maxError[xOrder +yOrder] = AccurateMath.max(maxError[xOrder + yOrder],
+                                                                    AccurateMath.abs(sRef.getPartialDerivative(xOrder, yOrder) -
                                                                                  s.getPartialDerivative(xOrder, yOrder)));
                        }
                    }