--- 
+++ 
@@ -1,15 +1,18 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with this
- * work for additional information regarding copyright ownership. The ASF
- * licenses this file to You under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
- * or agreed to in writing, software distributed under the License is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied. See the License for the specific language
- * governing permissions and limitations under the License.
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.commons.math4.legacy.core;
 
@@ -38,12 +41,11 @@
     private double[] testArray = {0, 1, 2, 3, 4, 5};
     private double[] testWeightsArray = {0.3, 0.2, 1.3, 1.1, 1.0, 1.8};
     private double[] testNegativeWeightsArray = {-0.3, 0.2, -1.3, 1.1, 1.0, 1.8};
-    private double[] nullArray = null;
     private double[] singletonArray = {0};
 
     @Test
     public void testScale() {
-        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };
+        final double[] test = new double[] {-2.5, -1, 0, 1, 2.5};
         final double[] correctTest = Arrays.copyOf(test, test.length);
         final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};
 
@@ -62,7 +64,7 @@
 
     @Test
     public void testScaleInPlace() {
-        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };
+        final double[] test = new double[] {-2.5, -1, 0, 1, 2.5};
         final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};
         MathArrays.scaleInPlace(-2.1, test);
 
@@ -72,27 +74,27 @@
         }
     }
 
-    @Test(expected=DimensionMismatchException.class)
+    @Test(expected = DimensionMismatchException.class)
     public void testEbeAddPrecondition() {
         MathArrays.ebeAdd(new double[3], new double[4]);
     }
-    @Test(expected=DimensionMismatchException.class)
+    @Test(expected = DimensionMismatchException.class)
     public void testEbeSubtractPrecondition() {
         MathArrays.ebeSubtract(new double[3], new double[4]);
     }
-    @Test(expected=DimensionMismatchException.class)
+    @Test(expected = DimensionMismatchException.class)
     public void testEbeMultiplyPrecondition() {
         MathArrays.ebeMultiply(new double[3], new double[4]);
     }
-    @Test(expected=DimensionMismatchException.class)
+    @Test(expected = DimensionMismatchException.class)
     public void testEbeDividePrecondition() {
         MathArrays.ebeDivide(new double[3], new double[4]);
     }
 
     @Test
     public void testEbeAdd() {
-        final double[] a = { 0, 1, 2 };
-        final double[] b = { 3, 5, 7 };
+        final double[] a = {0, 1, 2};
+        final double[] b = {3, 5, 7};
         final double[] r = MathArrays.ebeAdd(a, b);
 
         for (int i = 0; i < a.length; i++) {
@@ -101,28 +103,30 @@
     }
     @Test
     public void testEbeSubtract() {
-        final double[] a = { 0, 1, 2 };
-        final double[] b = { 3, 5, 7 };
+        final double[] a = {0, 1, 2};
+        final double[] b = {3, 5, 7};
         final double[] r = MathArrays.ebeSubtract(a, b);
 
         for (int i = 0; i < a.length; i++) {
             Assert.assertEquals(a[i] - b[i], r[i], 0);
         }
     }
+
     @Test
     public void testEbeMultiply() {
-        final double[] a = { 0, 1, 2 };
-        final double[] b = { 3, 5, 7 };
+        final double[] a = {0, 1, 2};
+        final double[] b = {3, 5, 7};
         final double[] r = MathArrays.ebeMultiply(a, b);
 
         for (int i = 0; i < a.length; i++) {
             Assert.assertEquals(a[i] * b[i], r[i], 0);
         }
     }
+
     @Test
     public void testEbeDivide() {
-        final double[] a = { 0, 1, 2 };
-        final double[] b = { 3, 5, 7 };
+        final double[] a = {0, 1, 2};
+        final double[] b = {3, 5, 7};
         final double[] r = MathArrays.ebeDivide(a, b);
 
         for (int i = 0; i < a.length; i++) {
@@ -132,43 +136,43 @@
 
     @Test
     public void testL1DistanceDouble() {
-        double[] p1 = { 2.5,  0.0 };
-        double[] p2 = { -0.5, 4.0 };
+        double[] p1 = {2.5, 0.0};
+        double[] p2 = {-0.5, 4.0};
         Assert.assertTrue(Precision.equals(7.0, MathArrays.distance1(p1, p2), 1));
     }
 
     @Test
     public void testL1DistanceInt() {
-        int[] p1 = { 3, 0 };
-        int[] p2 = { 0, 4 };
+        int[] p1 = {3, 0};
+        int[] p2 = {0, 4};
         Assert.assertEquals(7, MathArrays.distance1(p1, p2));
     }
 
     @Test
     public void testL2DistanceDouble() {
-        double[] p1 = { 2.5,  0.0 };
-        double[] p2 = { -0.5, 4.0 };
+        double[] p1 = {2.5, 0.0};
+        double[] p2 = {-0.5, 4.0};
         Assert.assertTrue(Precision.equals(5.0, MathArrays.distance(p1, p2), 1));
     }
 
     @Test
     public void testL2DistanceInt() {
-        int[] p1 = { 3, 0 };
-        int[] p2 = { 0, 4 };
+        int[] p1 = {3, 0};
+        int[] p2 = {0, 4};
         Assert.assertTrue(Precision.equals(5, MathArrays.distance(p1, p2), 1));
     }
 
     @Test
     public void testLInfDistanceDouble() {
-        double[] p1 = { 2.5,  0.0 };
-        double[] p2 = { -0.5, 4.0 };
+        double[] p1 = {2.5, 0.0};
+        double[] p2 = {-0.5, 4.0};
         Assert.assertTrue(Precision.equals(4.0, MathArrays.distanceInf(p1, p2), 1));
     }
 
     @Test
     public void testLInfDistanceInt() {
-        int[] p1 = { 3, 0 };
-        int[] p2 = { 0, 4 };
+        int[] p1 = {3, 0};
+        int[] p2 = {0, 4};
         Assert.assertEquals(4, MathArrays.distanceInf(p1, p2));
     }
 
@@ -222,77 +226,77 @@
 
     @Test
     public void testIsMonotonic() {
-        Assert.assertFalse(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -1, 2, 15 },
+        Assert.assertFalse(MathArrays.isMonotonic(new double[] {-15, -5.5, -1, -1, 2, 15},
                                                   MathArrays.OrderDirection.INCREASING, true));
-        Assert.assertTrue(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, 0, 2, 15 },
+        Assert.assertTrue(MathArrays.isMonotonic(new double[] {-15, -5.5, -1, 0, 2, 15},
                                                  MathArrays.OrderDirection.INCREASING, true));
-        Assert.assertFalse(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -2, 2 },
+        Assert.assertFalse(MathArrays.isMonotonic(new double[] {-15, -5.5, -1, -2, 2},
                                                   MathArrays.OrderDirection.INCREASING, false));
-        Assert.assertTrue(MathArrays.isMonotonic(new double[] { -15, -5.5, -1, -1, 2 },
+        Assert.assertTrue(MathArrays.isMonotonic(new double[] {-15, -5.5, -1, -1, 2},
                                                  MathArrays.OrderDirection.INCREASING, false));
-        Assert.assertFalse(MathArrays.isMonotonic(new double[] { 3, 3, -5.5, -11, -27.5 },
+        Assert.assertFalse(MathArrays.isMonotonic(new double[] {3, 3, -5.5, -11, -27.5},
                                                   MathArrays.OrderDirection.DECREASING, true));
-        Assert.assertTrue(MathArrays.isMonotonic(new double[] { 3, 2, -5.5, -11, -27.5 },
+        Assert.assertTrue(MathArrays.isMonotonic(new double[] {3, 2, -5.5, -11, -27.5},
                                                  MathArrays.OrderDirection.DECREASING, true));
-        Assert.assertFalse(MathArrays.isMonotonic(new double[] { 3, -1, 0, -5.5, -11, -27.5 },
+        Assert.assertFalse(MathArrays.isMonotonic(new double[] {3, -1, 0, -5.5, -11, -27.5},
                                                   MathArrays.OrderDirection.DECREASING, false));
-        Assert.assertTrue(MathArrays.isMonotonic(new double[] { 3, 0, 0, -5.5, -11, -27.5 },
+        Assert.assertTrue(MathArrays.isMonotonic(new double[] {3, 0, 0, -5.5, -11, -27.5},
                                                  MathArrays.OrderDirection.DECREASING, false));
     }
 
     @Test
     public void testIsMonotonicComparable() {
-        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(-15),
-                                                                 new Double(-5.5),
-                                                                 new Double(-1),
-                                                                 new Double(-1),
-                                                                 new Double(2),
-                                                                 new Double(15) },
-                MathArrays.OrderDirection.INCREASING, true));
-        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(-15),
+        Assert.assertFalse(MathArrays.isMonotonic(new Double[] {new Double(-15),
                                                                 new Double(-5.5),
                                                                 new Double(-1),
-                                                                new Double(0),
+                                                                new Double(-1),
                                                                 new Double(2),
                                                                 new Double(15) },
                 MathArrays.OrderDirection.INCREASING, true));
-        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(-15),
-                                                                 new Double(-5.5),
-                                                                 new Double(-1),
-                                                                 new Double(-2),
-                                                                 new Double(2) },
-                MathArrays.OrderDirection.INCREASING, false));
-        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(-15),
+        Assert.assertTrue(MathArrays.isMonotonic(new Double[] {new Double(-15),
+                                                               new Double(-5.5),
+                                                               new Double(-1),
+                                                               new Double(0),
+                                                               new Double(2),
+                                                               new Double(15) },
+                MathArrays.OrderDirection.INCREASING, true));
+        Assert.assertFalse(MathArrays.isMonotonic(new Double[] {new Double(-15),
                                                                 new Double(-5.5),
                                                                 new Double(-1),
-                                                                new Double(-1),
+                                                                new Double(-2),
                                                                 new Double(2) },
                 MathArrays.OrderDirection.INCREASING, false));
-        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(3),
-                                                                 new Double(3),
-                                                                 new Double(-5.5),
-                                                                 new Double(-11),
-                                                                 new Double(-27.5) },
-                MathArrays.OrderDirection.DECREASING, true));
-        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(3),
-                                                                new Double(2),
+        Assert.assertTrue(MathArrays.isMonotonic(new Double[] {new Double(-15),
+                                                               new Double(-5.5),
+                                                               new Double(-1),
+                                                               new Double(-1),
+                                                               new Double(2) },
+                MathArrays.OrderDirection.INCREASING, false));
+        Assert.assertFalse(MathArrays.isMonotonic(new Double[] {new Double(3),
+                                                                new Double(3),
                                                                 new Double(-5.5),
                                                                 new Double(-11),
                                                                 new Double(-27.5) },
                 MathArrays.OrderDirection.DECREASING, true));
-        Assert.assertFalse(MathArrays.isMonotonic(new Double[] { new Double(3),
-                                                                 new Double(-1),
-                                                                 new Double(0),
-                                                                 new Double(-5.5),
-                                                                 new Double(-11),
-                                                                 new Double(-27.5) },
-                MathArrays.OrderDirection.DECREASING, false));
-        Assert.assertTrue(MathArrays.isMonotonic(new Double[] { new Double(3),
-                                                                new Double(0),
+        Assert.assertTrue(MathArrays.isMonotonic(new Double[] {new Double(3),
+                                                               new Double(2),
+                                                               new Double(-5.5),
+                                                               new Double(-11),
+                                                               new Double(-27.5) },
+                MathArrays.OrderDirection.DECREASING, true));
+        Assert.assertFalse(MathArrays.isMonotonic(new Double[] {new Double(3),
+                                                                new Double(-1),
                                                                 new Double(0),
                                                                 new Double(-5.5),
                                                                 new Double(-11),
                                                                 new Double(-27.5) },
+                MathArrays.OrderDirection.DECREASING, false));
+        Assert.assertTrue(MathArrays.isMonotonic(new Double[] {new Double(3),
+                                                               new Double(0),
+                                                               new Double(0),
+                                                               new Double(-5.5),
+                                                               new Double(-11),
+                                                               new Double(-27.5) },
                 MathArrays.OrderDirection.DECREASING, false));
     }
 
@@ -386,24 +390,24 @@
 
     @Test
     public void testCheckNotNaN() {
-        final double[] withoutNaN = { Double.NEGATIVE_INFINITY,
-                                      -Double.MAX_VALUE,
-                                      -1, 0,
-                                      Double.MIN_VALUE,
-                                      AccurateMath.ulp(1d),
-                                      1, 3, 113, 4769,
-                                      Double.MAX_VALUE,
-                                      Double.POSITIVE_INFINITY };
-
-        final double[] withNaN = { Double.NEGATIVE_INFINITY,
-                                   -Double.MAX_VALUE,
-                                   -1, 0,
-                                   Double.MIN_VALUE,
-                                   AccurateMath.ulp(1d),
-                                   1, 3, 113, 4769,
-                                   Double.MAX_VALUE,
-                                   Double.POSITIVE_INFINITY,
-                                   Double.NaN };
+        final double[] withoutNaN = {Double.NEGATIVE_INFINITY,
+                                     -Double.MAX_VALUE,
+                                     -1, 0,
+                                     Double.MIN_VALUE,
+                                     AccurateMath.ulp(1d),
+                                     1, 3, 113, 4769,
+                                     Double.MAX_VALUE,
+                                     Double.POSITIVE_INFINITY };
+
+        final double[] withNaN = {Double.NEGATIVE_INFINITY,
+                                  -Double.MAX_VALUE,
+                                  -1, 0,
+                                  Double.MIN_VALUE,
+                                  AccurateMath.ulp(1d),
+                                  1, 3, 113, 4769,
+                                  Double.MAX_VALUE,
+                                  Double.POSITIVE_INFINITY,
+                                  Double.NaN };
 
 
         final double[] nullArray = null;
@@ -424,7 +428,7 @@
         }
     }
 
-    @Test(expected=DimensionMismatchException.class)
+    @Test(expected = DimensionMismatchException.class)
     public void testCheckEqualLength1() {
         MathArrays.checkEqualLength(new double[] {1, 2, 3},
                                     new double[] {1, 2, 3, 4});
@@ -439,41 +443,41 @@
 
     @Test
     public void testArrayEquals() {
-        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, null));
-        Assert.assertFalse(MathArrays.equals(null, new double[] { 1d }));
+        Assert.assertFalse(MathArrays.equals(new double[] {1d}, null));
+        Assert.assertFalse(MathArrays.equals(null, new double[] {1d}));
         Assert.assertTrue(MathArrays.equals((double[]) null, (double[]) null));
 
-        Assert.assertFalse(MathArrays.equals(new double[] { 1d }, new double[0]));
-        Assert.assertTrue(MathArrays.equals(new double[] { 1d }, new double[] { 1d }));
-        Assert.assertTrue(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY,
-                                                           Double.NEGATIVE_INFINITY, 1d, 0d },
-                                            new double[] { Double.POSITIVE_INFINITY,
-                                                           Double.NEGATIVE_INFINITY, 1d, 0d }));
-        Assert.assertFalse(MathArrays.equals(new double[] { Double.NaN },
-                                             new double[] { Double.NaN }));
-        Assert.assertFalse(MathArrays.equals(new double[] { Double.POSITIVE_INFINITY },
-                                             new double[] { Double.NEGATIVE_INFINITY }));
-        Assert.assertFalse(MathArrays.equals(new double[] { 1d },
-                                             new double[] { AccurateMath.nextAfter(AccurateMath.nextAfter(1d, 2d), 2d) }));
+        Assert.assertFalse(MathArrays.equals(new double[] {1d}, new double[0]));
+        Assert.assertTrue(MathArrays.equals(new double[] {1d}, new double[] {1d}));
+        Assert.assertTrue(MathArrays.equals(new double[] {Double.POSITIVE_INFINITY,
+                                                          Double.NEGATIVE_INFINITY, 1d, 0d},
+                                            new double[] {Double.POSITIVE_INFINITY,
+                                                          Double.NEGATIVE_INFINITY, 1d, 0d}));
+        Assert.assertFalse(MathArrays.equals(new double[] {Double.NaN},
+                                             new double[] {Double.NaN}));
+        Assert.assertFalse(MathArrays.equals(new double[] {Double.POSITIVE_INFINITY},
+                                             new double[] {Double.NEGATIVE_INFINITY}));
+        Assert.assertFalse(MathArrays.equals(new double[] {1d},
+                                             new double[] {AccurateMath.nextAfter(AccurateMath.nextAfter(1d, 2d), 2d)}));
 
     }
 
     @Test
     public void testArrayEqualsIncludingNaN() {
-        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, null));
-        Assert.assertFalse(MathArrays.equalsIncludingNaN(null, new double[] { 1d }));
+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] {1d}, null));
+        Assert.assertFalse(MathArrays.equalsIncludingNaN(null, new double[] {1d}));
         Assert.assertTrue(MathArrays.equalsIncludingNaN((double[]) null, (double[]) null));
 
-        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[0]));
-        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { 1d }, new double[] { 1d }));
-        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] { Double.NaN, Double.POSITIVE_INFINITY,
-                                                                       Double.NEGATIVE_INFINITY, 1d, 0d },
-                                                        new double[] { Double.NaN, Double.POSITIVE_INFINITY,
-                                                                       Double.NEGATIVE_INFINITY, 1d, 0d }));
-        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { Double.POSITIVE_INFINITY },
-                                                         new double[] { Double.NEGATIVE_INFINITY }));
-        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] { 1d },
-                                                         new double[] { AccurateMath.nextAfter(AccurateMath.nextAfter(1d, 2d), 2d) }));
+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] {1d}, new double[0]));
+        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] {1d}, new double[] {1d}));
+        Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[] {Double.NaN, Double.POSITIVE_INFINITY,
+                                                                      Double.NEGATIVE_INFINITY, 1d, 0d},
+                                                        new double[] {Double.NaN, Double.POSITIVE_INFINITY,
+                                                                      Double.NEGATIVE_INFINITY, 1d, 0d}));
+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] {Double.POSITIVE_INFINITY},
+                                                         new double[] {Double.NEGATIVE_INFINITY}));
+        Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[] {1d},
+                                                         new double[] {AccurateMath.nextAfter(AccurateMath.nextAfter(1d, 2d), 2d)}));
     }
 
     @Test
@@ -490,7 +494,7 @@
 
         // Ignore NaNs
         double[] testValues3 = new double[] {-1, -1, Double.NaN, 1, Double.NaN};
-        Assert.assertArrayEquals(new double[] {1, 1,Double.NaN, -1, Double.NaN},
+        Assert.assertArrayEquals(new double[] {1, 1, Double.NaN, -1, Double.NaN},
                                  MathArrays.normalizeArray(testValues3, 1),
                                  Double.MIN_VALUE);
 
@@ -499,26 +503,26 @@
         try {
             MathArrays.normalizeArray(zeroSum, 1);
             Assert.fail("expecting MathArithmeticException");
-        } catch (MathArithmeticException ex) {}
+        } catch (MathArithmeticException ex) { /* ignore */ }
 
         // Infinite elements -> MathArithmeticException
         double[] hasInf = new double[] {1, 2, 1, Double.NEGATIVE_INFINITY};
         try {
             MathArrays.normalizeArray(hasInf, 1);
             Assert.fail("expecting MathIllegalArgumentException");
-        } catch (MathIllegalArgumentException ex) {}
+        } catch (MathIllegalArgumentException ex) { /* ignore */ }
 
         // Infinite target -> MathIllegalArgumentException
         try {
             MathArrays.normalizeArray(testValues1, Double.POSITIVE_INFINITY);
             Assert.fail("expecting MathIllegalArgumentException");
-        } catch (MathIllegalArgumentException ex) {}
+        } catch (MathIllegalArgumentException ex) { /* ignore */ }
 
         // NaN target -> MathIllegalArgumentException
         try {
             MathArrays.normalizeArray(testValues1, Double.NaN);
             Assert.fail("expecting MathIllegalArgumentException");
-        } catch (MathIllegalArgumentException ex) {}
+        } catch (MathIllegalArgumentException ex) { /* ignore */ }
     }
 
     @Test
@@ -528,17 +532,17 @@
          * h=[1,0.8,0.5,0.3]
          * convolve(x,h) -> array([ 1.2 , -0.84,  0.56,  0.58,  0.16,  0.42])
          */
-        double[] x1 = { 1.2, -1.8, 1.4 };
-        double[] h1 = { 1, 0.8, 0.5, 0.3 };
-        double[] y1 = { 1.2, -0.84, 0.56, 0.58, 0.16, 0.42 };
+        double[] x1 = {1.2, -1.8, 1.4};
+        double[] h1 = {1, 0.8, 0.5, 0.3};
+        double[] y1 = {1.2, -0.84, 0.56, 0.58, 0.16, 0.42};
         double tolerance = 1e-13;
 
         double[] yActual = MathArrays.convolve(x1, h1);
         Assert.assertArrayEquals(y1, yActual, tolerance);
 
-        double[] x2 = { 1, 2, 3 };
-        double[] h2 = { 0, 1, 0.5 };
-        double[] y2 = { 0, 1, 2.5, 4, 1.5 };
+        double[] x2 = {1, 2, 3};
+        double[] h2 = {0, 1, 0.5};
+        double[] y2 = {0, 1, 2.5, 4, 1.5};
 
         yActual = MathArrays.convolve(x2, h2);
         Assert.assertArrayEquals(y2, yActual, tolerance);
@@ -628,6 +632,7 @@
 
     @Test
     public void testVerifyValuesNegative() {
+        final double[] nullArray = null;
         Assert.assertFalse(MathArrays.verifyValues(singletonArray, 0, 0));
         Assert.assertFalse(MathArrays.verifyValues(testArray, 0, 0));
         try {
@@ -706,7 +711,7 @@
         Assert.assertEquals(0,  MathArrays.concatenate(z, z, z).length);
     }
 
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testConcatenateNullArguments() {
         final double[] x = new double[] {0, 1, 2};
         MathArrays.concatenate(x, null);
@@ -721,10 +726,10 @@
 
     @Test
     public void testUniqueInfiniteValues() {
-        final double [] x = {0, Double.NEGATIVE_INFINITY, 3, Double.NEGATIVE_INFINITY,
+        final double[] x = {0, Double.NEGATIVE_INFINITY, 3, Double.NEGATIVE_INFINITY,
             3, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};
         final double[] u = {Double.POSITIVE_INFINITY, 3, 0, Double.NEGATIVE_INFINITY};
-        Assert.assertArrayEquals(u , MathArrays.unique(x), 0);
+        Assert.assertArrayEquals(u, MathArrays.unique(x), 0);
     }
 
     @Test
@@ -740,7 +745,7 @@
         Assert.assertEquals(Double.NEGATIVE_INFINITY, u[4], 0);
     }
 
-    @Test(expected=NullPointerException.class)
+    @Test(expected = NullPointerException.class)
     public void testUniqueNullArgument() {
         MathArrays.unique(null);
     }