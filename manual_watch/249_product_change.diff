--- 
+++ 
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math4.legacy.ode.nonstiff;
 
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 
 
 /**
@@ -60,8 +60,8 @@
 
   /** Time steps Butcher array. */
   private static final double[] STATIC_C = {
-    (12.0 - 2.0 * FastMath.sqrt(6.0)) / 135.0, (6.0 - FastMath.sqrt(6.0)) / 45.0, (6.0 - FastMath.sqrt(6.0)) / 30.0,
-    (6.0 + FastMath.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,
+    (12.0 - 2.0 * AccurateMath.sqrt(6.0)) / 135.0, (6.0 - AccurateMath.sqrt(6.0)) / 45.0, (6.0 - AccurateMath.sqrt(6.0)) / 30.0,
+    (6.0 + AccurateMath.sqrt(6.0)) / 30.0, 1.0/3.0, 1.0/4.0, 4.0/13.0, 127.0/195.0, 3.0/5.0,
     6.0/7.0, 1.0, 1.0
   };
 
@@ -69,55 +69,55 @@
   private static final double[][] STATIC_A = {
 
     // k2
-    {(12.0 - 2.0 * FastMath.sqrt(6.0)) / 135.0},
+    {(12.0 - 2.0 * AccurateMath.sqrt(6.0)) / 135.0},
 
     // k3
-    {(6.0 - FastMath.sqrt(6.0)) / 180.0, (6.0 - FastMath.sqrt(6.0)) / 60.0},
+    {(6.0 - AccurateMath.sqrt(6.0)) / 180.0, (6.0 - AccurateMath.sqrt(6.0)) / 60.0},
 
     // k4
-    {(6.0 - FastMath.sqrt(6.0)) / 120.0, 0.0, (6.0 - FastMath.sqrt(6.0)) / 40.0},
+    {(6.0 - AccurateMath.sqrt(6.0)) / 120.0, 0.0, (6.0 - AccurateMath.sqrt(6.0)) / 40.0},
 
     // k5
-    {(462.0 + 107.0 * FastMath.sqrt(6.0)) / 3000.0, 0.0,
-     (-402.0 - 197.0 * FastMath.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * FastMath.sqrt(6.0)) / 375.0},
+    {(462.0 + 107.0 * AccurateMath.sqrt(6.0)) / 3000.0, 0.0,
+     (-402.0 - 197.0 * AccurateMath.sqrt(6.0)) / 1000.0, (168.0 + 73.0 * AccurateMath.sqrt(6.0)) / 375.0},
 
     // k6
-    {1.0 / 27.0, 0.0, 0.0, (16.0 + FastMath.sqrt(6.0)) / 108.0, (16.0 - FastMath.sqrt(6.0)) / 108.0},
+    {1.0 / 27.0, 0.0, 0.0, (16.0 + AccurateMath.sqrt(6.0)) / 108.0, (16.0 - AccurateMath.sqrt(6.0)) / 108.0},
 
     // k7
-    {19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * FastMath.sqrt(6.0)) / 1024.0,
-     (118.0 - 23.0 * FastMath.sqrt(6.0)) / 1024.0, -9.0 / 512.0},
+    {19.0 / 512.0, 0.0, 0.0, (118.0 + 23.0 * AccurateMath.sqrt(6.0)) / 1024.0,
+     (118.0 - 23.0 * AccurateMath.sqrt(6.0)) / 1024.0, -9.0 / 512.0},
 
     // k8
-    {13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * FastMath.sqrt(6.0)) / 371293.0,
-     (51544.0 - 4784.0 * FastMath.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},
+    {13772.0 / 371293.0, 0.0, 0.0, (51544.0 + 4784.0 * AccurateMath.sqrt(6.0)) / 371293.0,
+     (51544.0 - 4784.0 * AccurateMath.sqrt(6.0)) / 371293.0, -5688.0 / 371293.0, 3072.0 / 371293.0},
 
     // k9
     {58656157643.0 / 93983540625.0, 0.0, 0.0,
-     (-1324889724104.0 - 318801444819.0 * FastMath.sqrt(6.0)) / 626556937500.0,
-     (-1324889724104.0 + 318801444819.0 * FastMath.sqrt(6.0)) / 626556937500.0,
+     (-1324889724104.0 - 318801444819.0 * AccurateMath.sqrt(6.0)) / 626556937500.0,
+     (-1324889724104.0 + 318801444819.0 * AccurateMath.sqrt(6.0)) / 626556937500.0,
      96044563816.0 / 3480871875.0, 5682451879168.0 / 281950621875.0,
      -165125654.0 / 3796875.0},
 
     // k10
     {8909899.0 / 18653125.0, 0.0, 0.0,
-     (-4521408.0 - 1137963.0 * FastMath.sqrt(6.0)) / 2937500.0,
-     (-4521408.0 + 1137963.0 * FastMath.sqrt(6.0)) / 2937500.0,
+     (-4521408.0 - 1137963.0 * AccurateMath.sqrt(6.0)) / 2937500.0,
+     (-4521408.0 + 1137963.0 * AccurateMath.sqrt(6.0)) / 2937500.0,
      96663078.0 / 4553125.0, 2107245056.0 / 137915625.0,
      -4913652016.0 / 147609375.0, -78894270.0 / 3880452869.0},
 
     // k11
     {-20401265806.0 / 21769653311.0, 0.0, 0.0,
-     (354216.0 + 94326.0 * FastMath.sqrt(6.0)) / 112847.0,
-     (354216.0 - 94326.0 * FastMath.sqrt(6.0)) / 112847.0,
+     (354216.0 + 94326.0 * AccurateMath.sqrt(6.0)) / 112847.0,
+     (354216.0 - 94326.0 * AccurateMath.sqrt(6.0)) / 112847.0,
      -43306765128.0 / 5313852383.0, -20866708358144.0 / 1126708119789.0,
      14886003438020.0 / 654632330667.0, 35290686222309375.0 / 14152473387134411.0,
      -1477884375.0 / 485066827.0},
 
     // k12
     {39815761.0 / 17514443.0, 0.0, 0.0,
-     (-3457480.0 - 960905.0 * FastMath.sqrt(6.0)) / 551636.0,
-     (-3457480.0 + 960905.0 * FastMath.sqrt(6.0)) / 551636.0,
+     (-3457480.0 - 960905.0 * AccurateMath.sqrt(6.0)) / 551636.0,
+     (-3457480.0 + 960905.0 * AccurateMath.sqrt(6.0)) / 551636.0,
      -844554132.0 / 47026969.0, 8444996352.0 / 302158619.0,
      -2509602342.0 / 877790785.0, -28388795297996250.0 / 3199510091356783.0,
      226716250.0 / 18341897.0, 1371316744.0 / 2131383595.0},
@@ -264,7 +264,7 @@
                              E2_09 * yDotK[8][j]  + E2_10 * yDotK[9][j] +
                              E2_11 * yDotK[10][j] + E2_12 * yDotK[11][j];
 
-      final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));
+      final double yScale = AccurateMath.max(AccurateMath.abs(y0[j]), AccurateMath.abs(y1[j]));
       final double tol = (vecAbsoluteTolerance == null) ?
                          (scalAbsoluteTolerance + scalRelativeTolerance * yScale) :
                          (vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale);
@@ -279,7 +279,7 @@
       den = 1.0;
     }
 
-    return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);
+    return AccurateMath.abs(h) * error1 / AccurateMath.sqrt(mainSetDimension * den);
 
   }
 