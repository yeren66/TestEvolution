--- 
+++ 
@@ -35,7 +35,7 @@
 import org.apache.commons.math4.legacy.ode.events.EventHandler;
 import org.apache.commons.math4.legacy.ode.sampling.StepHandler;
 import org.apache.commons.math4.legacy.ode.sampling.StepInterpolator;
-import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
+import org.apache.commons.math4.core.jdkmath.JdkMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -66,7 +66,7 @@
       double previousTimeError = Double.NaN;
       for (int i = 5; i < 10; ++i) {
 
-        double step = (pb.getFinalTime() - pb.getInitialTime()) * AccurateMath.pow(2.0, -i);
+        double step = (pb.getFinalTime() - pb.getInitialTime()) * JdkMath.pow(2.0, -i);
 
         FirstOrderIntegrator integ = new GillIntegrator(step);
         TestProblemHandler handler = new TestProblemHandler(pb, integ);
@@ -84,13 +84,13 @@
 
         double valueError = handler.getMaximalValueError();
         if (i > 5) {
-          Assert.assertTrue(valueError < 1.01 * AccurateMath.abs(previousValueError));
+          Assert.assertTrue(valueError < 1.01 * JdkMath.abs(previousValueError));
         }
         previousValueError = valueError;
 
         double timeError = handler.getMaximalTimeError();
         if (i > 5) {
-          Assert.assertTrue(timeError <= AccurateMath.abs(previousTimeError));
+          Assert.assertTrue(timeError <= JdkMath.abs(previousTimeError));
         }
         previousTimeError = timeError;
 
@@ -147,7 +147,7 @@
              MaxCountExceededException, NoBracketingException {
 
       TestProblem5 pb = new TestProblem5();
-      double step = AccurateMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
+      double step = JdkMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
 
       FirstOrderIntegrator integ = new GillIntegrator(step);
       TestProblemHandler handler = new TestProblemHandler(pb, integ);