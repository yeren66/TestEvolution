--- 
+++ 
@@ -20,7 +20,7 @@
 import org.apache.commons.math4.legacy.analysis.differentiation.DerivativeStructure;
 import org.apache.commons.math4.legacy.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math4.legacy.exception.DimensionMismatchException;
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 
 /**
  * <a href="http://en.wikipedia.org/wiki/Sinc_function">Sinc</a> function,
@@ -81,14 +81,14 @@
     /** {@inheritDoc} */
     @Override
     public double value(final double x) {
-        final double scaledX = normalized ? FastMath.PI * x : x;
-        if (FastMath.abs(scaledX) <= SHORTCUT) {
+        final double scaledX = normalized ? AccurateMath.PI * x : x;
+        if (AccurateMath.abs(scaledX) <= SHORTCUT) {
             // use Taylor series
             final double scaledX2 = scaledX * scaledX;
             return ((scaledX2 - 20) * scaledX2 + 120) / 120;
         } else {
             // use definition expression
-            return FastMath.sin(scaledX) / scaledX;
+            return AccurateMath.sin(scaledX) / scaledX;
         }
     }
 
@@ -99,12 +99,12 @@
     public DerivativeStructure value(final DerivativeStructure t)
         throws DimensionMismatchException {
 
-        final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue();
+        final double scaledX  = (normalized ? AccurateMath.PI : 1) * t.getValue();
         final double scaledX2 = scaledX * scaledX;
 
         double[] f = new double[t.getOrder() + 1];
 
-        if (FastMath.abs(scaledX) <= SHORTCUT) {
+        if (AccurateMath.abs(scaledX) <= SHORTCUT) {
 
             for (int i = 0; i < f.length; ++i) {
                 final int k = i / 2;
@@ -122,8 +122,8 @@
         } else {
 
             final double inv = 1 / scaledX;
-            final double cos = FastMath.cos(scaledX);
-            final double sin = FastMath.sin(scaledX);
+            final double cos = AccurateMath.cos(scaledX);
+            final double sin = AccurateMath.sin(scaledX);
 
             f[0] = inv * sin;
 
@@ -182,10 +182,10 @@
         }
 
         if (normalized) {
-            double scale = FastMath.PI;
+            double scale = AccurateMath.PI;
             for (int i = 1; i < f.length; ++i) {
                 f[i]  *= scale;
-                scale *= FastMath.PI;
+                scale *= AccurateMath.PI;
             }
         }
 