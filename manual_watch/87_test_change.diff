--- 
+++ 
@@ -35,7 +35,7 @@
 import org.apache.commons.math4.legacy.ode.events.EventHandler;
 import org.apache.commons.math4.legacy.ode.sampling.StepHandler;
 import org.apache.commons.math4.legacy.ode.sampling.StepInterpolator;
-import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
+import org.apache.commons.math4.core.jdkmath.JdkMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -74,7 +74,7 @@
         double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
         Assert.assertEquals(tEvent, finalT, 1.0e-15);
         for (int i = 0; i < y.length; ++i) {
-            Assert.assertEquals(y0[i] * AccurateMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-15);
+            Assert.assertEquals(y0[i] * JdkMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-15);
         }
 
         integrator.addEventHandler(new EventHandler() {
@@ -101,7 +101,7 @@
         finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
         Assert.assertEquals(tEvent + 120, finalT, 1.0e-15);
         for (int i = 0; i < y.length; ++i) {
-            Assert.assertEquals(y0[i] * AccurateMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-15);
+            Assert.assertEquals(y0[i] * JdkMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-15);
         }
 
     }
@@ -150,7 +150,7 @@
             double previousTimeError = Double.NaN;
             for (int i = 4; i < 10; ++i) {
 
-                double step = (pb.getFinalTime() - pb.getInitialTime()) * AccurateMath.pow(2.0, -i);
+                double step = (pb.getFinalTime() - pb.getInitialTime()) * JdkMath.pow(2.0, -i);
 
                 FirstOrderIntegrator integ = new LutherIntegrator(step);
                 TestProblemHandler handler = new TestProblemHandler(pb, integ);
@@ -169,13 +169,13 @@
 
                 double error = handler.getMaximalValueError();
                 if (i > 4) {
-                    Assert.assertTrue(error < 1.01 * AccurateMath.abs(previousValueError));
+                    Assert.assertTrue(error < 1.01 * JdkMath.abs(previousValueError));
                 }
                 previousValueError = error;
 
                 double timeError = handler.getMaximalTimeError();
                 if (i > 4) {
-                    Assert.assertTrue(timeError <= AccurateMath.abs(previousTimeError));
+                    Assert.assertTrue(timeError <= JdkMath.abs(previousTimeError));
                 }
                 previousTimeError = timeError;
 
@@ -233,7 +233,7 @@
             MaxCountExceededException, NoBracketingException {
 
         TestProblem5 pb = new TestProblem5();
-        double step = AccurateMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
+        double step = JdkMath.abs(pb.getFinalTime() - pb.getInitialTime()) * 0.001;
 
         FirstOrderIntegrator integ = new LutherIntegrator(step);
         TestProblemHandler handler = new TestProblemHandler(pb, integ);