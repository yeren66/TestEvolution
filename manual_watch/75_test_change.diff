--- 
+++ 
@@ -19,7 +19,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math4.legacy.exception.DimensionMismatchException;
-import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
+import org.apache.commons.math4.core.jdkmath.JdkMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -53,7 +53,7 @@
             }
         };
         final double shiftm = shift;
-        final double pertm = AccurateMath.abs(pertbn);
+        final double pertm = JdkMath.abs(pertbn);
         final RealLinearOperator minv;
         if (precon) {
             minv = new RealLinearOperator() {
@@ -76,7 +76,7 @@
                     final double[] y = new double[n];
                     for (int i = 0; i < n; i++) {
                         double d = (i + 1) * 1.1 / n;
-                        d = AccurateMath.abs(d - shiftm);
+                        d = JdkMath.abs(d - shiftm);
                         if (i % 10 == 0) {
                             d += pertm;
                         }
@@ -255,7 +255,7 @@
             for (int i = 0; i < n; i++) {
                 final double actual = x.getEntry(i);
                 final double expected = ainv.getEntry(i, j);
-                final double delta = 1E-6 * AccurateMath.abs(expected);
+                final double delta = 1E-6 * JdkMath.abs(expected);
                 final String msg = String.format("entry[%d][%d]", i, j);
                 Assert.assertEquals(msg, expected, actual, delta);
             }
@@ -281,7 +281,7 @@
             for (int i = 0; i < n; i++) {
                 final double actual = x.getEntry(i);
                 final double expected = ainv.getEntry(i, j);
-                final double delta = 1E-6 * AccurateMath.abs(expected);
+                final double delta = 1E-6 * JdkMath.abs(expected);
                 final String msg = String.format("entry[%d][%d)", i, j);
                 Assert.assertEquals(msg, expected, actual, delta);
             }
@@ -307,7 +307,7 @@
             for (int i = 0; i < n; i++) {
                 final double actual = x.getEntry(i);
                 final double expected = ainv.getEntry(i, j);
-                final double delta = 1E-6 * AccurateMath.abs(expected);
+                final double delta = 1E-6 * JdkMath.abs(expected);
                 final String msg = String.format("entry[%d][%d]", i, j);
                 Assert.assertEquals(msg, expected, actual, delta);
                 Assert.assertEquals(msg, x0.getEntry(i), 1., Math.ulp(1.));
@@ -419,7 +419,7 @@
             for (int i = 0; i < n; i++) {
                 final double actual = x.getEntry(i);
                 final double expected = ainv.getEntry(i, j);
-                final double delta = 1E-6 * AccurateMath.abs(expected);
+                final double delta = 1E-6 * JdkMath.abs(expected);
                 final String msg = String.format("coefficient (%d, %d)", i, j);
                 Assert.assertEquals(msg, expected, actual, delta);
             }
@@ -464,7 +464,7 @@
                 msg = String.format("row %d, column %d", i, j);
                 final double expected = x.getEntry(i);
                 final double actual = px.getEntry(i);
-                final double delta = 5E-5 * AccurateMath.abs(expected);
+                final double delta = 5E-5 * JdkMath.abs(expected);
                 Assert.assertEquals(msg, expected, actual, delta);
             }
         }
@@ -609,7 +609,7 @@
                 final double rnorm = r.getNorm();
                 Assert.assertEquals("iteration performed (residual)",
                     rnorm, evt.getNormOfResidual(),
-                    AccurateMath.max(1E-5 * rnorm, 1E-10));
+                    JdkMath.max(1E-5 * rnorm, 1E-10));
             }
 
             @Override
@@ -661,7 +661,7 @@
                 final double rnorm = p.operate(r).getNorm();
                 Assert.assertEquals("iteration performed (residual)",
                     rnorm, evt.getNormOfResidual(),
-                    AccurateMath.max(1E-5 * rnorm, 1E-10));
+                    JdkMath.max(1E-5 * rnorm, 1E-10));
             }
 
             @Override