--- 
+++ 
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.legacy.exception.MathIllegalArgumentException;
 import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.rng.simple.RandomSource;
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 import org.apache.commons.numbers.core.Precision;
 import org.junit.Assert;
 import org.junit.Test;
@@ -393,7 +393,7 @@
             expected = f.value(currentX, currentY, currentZ);
 
             actual = interpolation.value(currentX, currentY, currentZ);
-            final double relativeError = FastMath.abs(actual - expected) / FastMath.max(FastMath.abs(actual), FastMath.abs(expected));
+            final double relativeError = AccurateMath.abs(actual - expected) / AccurateMath.max(AccurateMath.abs(actual), AccurateMath.abs(expected));
             sumError += relativeError;
 
             if (print) {
@@ -579,56 +579,56 @@
         final TrivariateFunction f = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return a * FastMath.cos(arg.value(x, y, z));
+                    return a * AccurateMath.cos(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction dfdx = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return kx * a * FastMath.sin(arg.value(x, y, z));
+                    return kx * a * AccurateMath.sin(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction dfdy = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return ky * a * FastMath.sin(arg.value(x, y, z));
+                    return ky * a * AccurateMath.sin(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction dfdz = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return -omega * a * FastMath.sin(arg.value(x, y, z));
+                    return -omega * a * AccurateMath.sin(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction d2fdxdy = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return -ky * kx * a * FastMath.cos(arg.value(x, y, z));
+                    return -ky * kx * a * AccurateMath.cos(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction d2fdxdz = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return omega * kx * a * FastMath.cos(arg.value(x, y, z));
+                    return omega * kx * a * AccurateMath.cos(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction d2fdydz = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return omega * ky * a * FastMath.cos(arg.value(x, y, z));
+                    return omega * ky * a * AccurateMath.cos(arg.value(x, y, z));
                 }
             };
 
         final TrivariateFunction d3fdxdydz = new TrivariateFunction() {
                 @Override
                 public double value(double x, double y, double z) {
-                    return omega * ky * kx * a * FastMath.sin(arg.value(x, y, z));
+                    return omega * ky * kx * a * AccurateMath.sin(arg.value(x, y, z));
                 }
             };
 