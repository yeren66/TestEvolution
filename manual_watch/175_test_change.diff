--- 
+++ 
@@ -438,107 +438,6 @@
     }
 
     @Test
-    public void testSortInPlace() {
-        final double[] x1 = {2,   5,  -3, 1,  4};
-        final double[] x2 = {4,  25,   9, 1, 16};
-        final double[] x3 = {8, 125, -27, 1, 64};
-
-        MathArrays.sortInPlace(x1, x2, x3);
-
-        Assert.assertEquals(-3,  x1[0], AccurateMath.ulp(1d));
-        Assert.assertEquals(9,   x2[0], AccurateMath.ulp(1d));
-        Assert.assertEquals(-27, x3[0], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(1, x1[1], AccurateMath.ulp(1d));
-        Assert.assertEquals(1, x2[1], AccurateMath.ulp(1d));
-        Assert.assertEquals(1, x3[1], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(2, x1[2], AccurateMath.ulp(1d));
-        Assert.assertEquals(4, x2[2], AccurateMath.ulp(1d));
-        Assert.assertEquals(8, x3[2], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(4,  x1[3], AccurateMath.ulp(1d));
-        Assert.assertEquals(16, x2[3], AccurateMath.ulp(1d));
-        Assert.assertEquals(64, x3[3], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(5,   x1[4], AccurateMath.ulp(1d));
-        Assert.assertEquals(25,  x2[4], AccurateMath.ulp(1d));
-        Assert.assertEquals(125, x3[4], AccurateMath.ulp(1d));
-    }
-
-    @Test
-    public void testSortInPlaceDecreasingOrder() {
-        final double[] x1 = {2,   5,  -3, 1,  4};
-        final double[] x2 = {4,  25,   9, 1, 16};
-        final double[] x3 = {8, 125, -27, 1, 64};
-
-        MathArrays.sortInPlace(x1,
-                               MathArrays.OrderDirection.DECREASING,
-                               x2, x3);
-
-        Assert.assertEquals(-3,  x1[4], AccurateMath.ulp(1d));
-        Assert.assertEquals(9,   x2[4], AccurateMath.ulp(1d));
-        Assert.assertEquals(-27, x3[4], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(1, x1[3], AccurateMath.ulp(1d));
-        Assert.assertEquals(1, x2[3], AccurateMath.ulp(1d));
-        Assert.assertEquals(1, x3[3], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(2, x1[2], AccurateMath.ulp(1d));
-        Assert.assertEquals(4, x2[2], AccurateMath.ulp(1d));
-        Assert.assertEquals(8, x3[2], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(4,  x1[1], AccurateMath.ulp(1d));
-        Assert.assertEquals(16, x2[1], AccurateMath.ulp(1d));
-        Assert.assertEquals(64, x3[1], AccurateMath.ulp(1d));
-
-        Assert.assertEquals(5,   x1[0], AccurateMath.ulp(1d));
-        Assert.assertEquals(25,  x2[0], AccurateMath.ulp(1d));
-        Assert.assertEquals(125, x3[0], AccurateMath.ulp(1d));
-    }
-
-    /** Example in javadoc */
-    @Test
-    public void testSortInPlaceExample() {
-        final double[] x = {3, 1, 2};
-        final double[] y = {1, 2, 3};
-        final double[] z = {0, 5, 7};
-        MathArrays.sortInPlace(x, y, z);
-        final double[] sx = {1, 2, 3};
-        final double[] sy = {2, 3, 1};
-        final double[] sz = {5, 7, 0};
-        Assert.assertTrue(Arrays.equals(sx, x));
-        Assert.assertTrue(Arrays.equals(sy, y));
-        Assert.assertTrue(Arrays.equals(sz, z));
-    }
-
-    @Test
-    public void testSortInPlaceFailures() {
-        final double[] nullArray = null;
-        final double[] one = {1};
-        final double[] two = {1, 2};
-        final double[] onep = {2};
-        try {
-            MathArrays.sortInPlace(one, two);
-            Assert.fail("Expecting DimensionMismatchException");
-        } catch (DimensionMismatchException ex) {
-            // expected
-        }
-        try {
-            MathArrays.sortInPlace(one, nullArray);
-            Assert.fail("Expecting NullArgumentException");
-        } catch (NullArgumentException ex) {
-            // expected
-        }
-        try {
-            MathArrays.sortInPlace(one, onep, nullArray);
-            Assert.fail("Expecting NullArgumentException");
-        } catch (NullArgumentException ex) {
-            // expected
-        }
-    }
-
-    @Test
     public void testArrayEquals() {
         Assert.assertFalse(MathArrays.equals(new double[] { 1d }, null));
         Assert.assertFalse(MathArrays.equals(null, new double[] { 1d }));