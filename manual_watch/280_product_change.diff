--- 
+++ 
@@ -28,8 +28,8 @@
 import org.apache.commons.math4.legacy.exception.util.LocalizedFormats;
 import org.apache.commons.math4.legacy.stat.descriptive.AbstractUnivariateStatistic;
 import org.apache.commons.math4.legacy.stat.ranking.NaNStrategy;
-import org.apache.commons.math4.legacy.util.FastMath;
-import org.apache.commons.math4.legacy.util.MathArrays;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
+import org.apache.commons.math4.legacy.core.MathArrays;
 import org.apache.commons.numbers.core.Precision;
 
 /**
@@ -964,7 +964,7 @@
             protected double estimate(final double[] values,
                                       final int[] pivotsHeap, final double pos,
                                       final int length, final KthSelector selector) {
-                return super.estimate(values, pivotsHeap, FastMath.ceil(pos - 0.5), length, selector);
+                return super.estimate(values, pivotsHeap, AccurateMath.ceil(pos - 0.5), length, selector);
             }
             @Override
             public double evaluate(final double[] work, final double[] sampleWeights,
@@ -1001,9 +1001,9 @@
                                       final int[] pivotsHeap, final double pos,
                                       final int length, final KthSelector selector) {
                 final double low =
-                        super.estimate(values, pivotsHeap, FastMath.ceil(pos - 0.5), length, selector);
+                        super.estimate(values, pivotsHeap, AccurateMath.ceil(pos - 0.5), length, selector);
                 final double high =
-                        super.estimate(values, pivotsHeap,FastMath.floor(pos + 0.5), length, selector);
+                        super.estimate(values, pivotsHeap,AccurateMath.floor(pos + 0.5), length, selector);
                 return (low + high) / 2;
             }
             @Override
@@ -1025,7 +1025,7 @@
             protected double index(final double p, final int length) {
                 final double minLimit = 1d/2 / length;
                 return Double.compare(p, minLimit) <= 0 ?
-                        0 : FastMath.rint(length * p);
+                        0 : AccurateMath.rint(length * p);
             }
             @Override
             public double evaluate(final double[] work, final double[] sampleWeights,
@@ -1271,7 +1271,7 @@
                                   final double pos, final int length,
                                   final KthSelector selector) {
 
-            final double fpos = FastMath.floor(pos);
+            final double fpos = AccurateMath.floor(pos);
             final int intPos = (int) fpos;
             final double dif = pos - fpos;
 