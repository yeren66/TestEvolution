--- 
+++ 
@@ -22,7 +22,7 @@
 import org.apache.commons.math4.legacy.analysis.function.Sin;
 import org.apache.commons.math4.legacy.exception.NoBracketingException;
 import org.apache.commons.math4.legacy.exception.NumberIsTooLargeException;
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -46,15 +46,15 @@
         UnivariateSolver solver = new RiddersSolver();
         double min, max, expected, result, tolerance;
 
-        min = 3.0; max = 4.0; expected = FastMath.PI;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        min = 3.0; max = 4.0; expected = AccurateMath.PI;
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
 
         min = -1.0; max = 1.5; expected = 0.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
     }
@@ -69,20 +69,20 @@
         double min, max, expected, result, tolerance;
 
         min = -0.4; max = 0.2; expected = 0.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
 
         min = 0.75; max = 1.5; expected = 1.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
 
         min = -0.9; max = -0.2; expected = -0.5;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
     }
@@ -97,20 +97,20 @@
         double min, max, expected, result, tolerance;
 
         min = -1.0; max = 2.0; expected = 0.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
 
         min = -20.0; max = 10.0; expected = 0.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
 
         min = -50.0; max = 100.0; expected = 0.0;
-        tolerance = FastMath.max(solver.getAbsoluteAccuracy(),
-                    FastMath.abs(expected * solver.getRelativeAccuracy()));
+        tolerance = AccurateMath.max(solver.getAbsoluteAccuracy(),
+                    AccurateMath.abs(expected * solver.getRelativeAccuracy()));
         result = solver.solve(100, f, min, max);
         Assert.assertEquals(expected, result, tolerance);
     }