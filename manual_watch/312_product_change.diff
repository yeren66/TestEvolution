--- 
+++ 
@@ -109,97 +109,6 @@
     }
 
     /**
-     * Returns the first argument with the sign of the second argument.
-     *
-     * @param magnitude Magnitude of the returned value.
-     * @param sign Sign of the returned value.
-     * @return a value with magnitude equal to {@code magnitude} and with the
-     * same sign as the {@code sign} argument.
-     * @throws MathArithmeticException if {@code magnitude == Byte.MIN_VALUE}
-     * and {@code sign >= 0}.
-     */
-    public static byte copySign(byte magnitude, byte sign)
-        throws MathArithmeticException {
-        if ((magnitude >= 0 && sign >= 0) ||
-            (magnitude < 0 && sign < 0)) { // Sign is OK.
-            return magnitude;
-        } else if (sign >= 0 &&
-                   magnitude == Byte.MIN_VALUE) {
-            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
-        } else {
-            return (byte) -magnitude; // Flip sign.
-        }
-    }
-
-    /**
-     * Returns the first argument with the sign of the second argument.
-     *
-     * @param magnitude Magnitude of the returned value.
-     * @param sign Sign of the returned value.
-     * @return a value with magnitude equal to {@code magnitude} and with the
-     * same sign as the {@code sign} argument.
-     * @throws MathArithmeticException if {@code magnitude == Short.MIN_VALUE}
-     * and {@code sign >= 0}.
-     */
-    public static short copySign(short magnitude, short sign)
-            throws MathArithmeticException {
-        if ((magnitude >= 0 && sign >= 0) ||
-            (magnitude < 0 && sign < 0)) { // Sign is OK.
-            return magnitude;
-        } else if (sign >= 0 &&
-                   magnitude == Short.MIN_VALUE) {
-            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
-        } else {
-            return (short) -magnitude; // Flip sign.
-        }
-    }
-
-    /**
-     * Returns the first argument with the sign of the second argument.
-     *
-     * @param magnitude Magnitude of the returned value.
-     * @param sign Sign of the returned value.
-     * @return a value with magnitude equal to {@code magnitude} and with the
-     * same sign as the {@code sign} argument.
-     * @throws MathArithmeticException if {@code magnitude == Integer.MIN_VALUE}
-     * and {@code sign >= 0}.
-     */
-    public static int copySign(int magnitude, int sign)
-            throws MathArithmeticException {
-        if ((magnitude >= 0 && sign >= 0) ||
-            (magnitude < 0 && sign < 0)) { // Sign is OK.
-            return magnitude;
-        } else if (sign >= 0 &&
-                   magnitude == Integer.MIN_VALUE) {
-            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
-        } else {
-            return -magnitude; // Flip sign.
-        }
-    }
-
-    /**
-     * Returns the first argument with the sign of the second argument.
-     *
-     * @param magnitude Magnitude of the returned value.
-     * @param sign Sign of the returned value.
-     * @return a value with magnitude equal to {@code magnitude} and with the
-     * same sign as the {@code sign} argument.
-     * @throws MathArithmeticException if {@code magnitude == Long.MIN_VALUE}
-     * and {@code sign >= 0}.
-     */
-    public static long copySign(long magnitude, long sign)
-        throws MathArithmeticException {
-        if ((magnitude >= 0 && sign >= 0) ||
-            (magnitude < 0 && sign < 0)) { // Sign is OK.
-            return magnitude;
-        } else if (sign >= 0 &&
-                   magnitude == Long.MIN_VALUE) {
-            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
-        } else {
-            return -magnitude; // Flip sign.
-        }
-    }
-    /**
      * Check that the argument is a real number.
      *
      * @param x Argument.