--- 
+++ 
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.legacy.analysis.function.Sin;
 import org.apache.commons.math4.legacy.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.legacy.exception.NumberIsTooSmallException;
-import org.apache.commons.math4.legacy.util.FastMath;
+import org.apache.commons.math4.legacy.core.jdkmath.AccurateMath;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -44,15 +44,15 @@
         UnivariateIntegrator integrator = new TrapezoidIntegrator();
         double min, max, expected, result, tolerance;
 
-        min = 0; max = FastMath.PI; expected = 2;
-        tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
+        min = 0; max = AccurateMath.PI; expected = 2;
+        tolerance = AccurateMath.abs(expected * integrator.getRelativeAccuracy());
         result = integrator.integrate(10000, f, min, max);
         Assert.assertTrue(integrator.getEvaluations() < 2500);
         Assert.assertTrue(integrator.getIterations()  < 15);
         Assert.assertEquals(expected, result, tolerance);
 
-        min = -FastMath.PI/3; max = 0; expected = -0.5;
-        tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
+        min = -AccurateMath.PI/3; max = 0; expected = -0.5;
+        tolerance = AccurateMath.abs(expected * integrator.getRelativeAccuracy());
         result = integrator.integrate(10000, f, min, max);
         Assert.assertTrue(integrator.getEvaluations() < 2500);
         Assert.assertTrue(integrator.getIterations()  < 15);
@@ -69,21 +69,21 @@
         double min, max, expected, result, tolerance;
 
         min = 0; max = 1; expected = -1.0/48;
-        tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
+        tolerance = AccurateMath.abs(expected * integrator.getRelativeAccuracy());
         result = integrator.integrate(10000, f, min, max);
         Assert.assertTrue(integrator.getEvaluations() < 5000);
         Assert.assertTrue(integrator.getIterations()  < 15);
         Assert.assertEquals(expected, result, tolerance);
 
         min = 0; max = 0.5; expected = 11.0/768;
-        tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
+        tolerance = AccurateMath.abs(expected * integrator.getRelativeAccuracy());
         result = integrator.integrate(10000, f, min, max);
         Assert.assertTrue(integrator.getEvaluations() < 2500);
         Assert.assertTrue(integrator.getIterations()  < 15);
         Assert.assertEquals(expected, result, tolerance);
 
         min = -1; max = 4; expected = 2048/3.0 - 78 + 1.0/48;
-        tolerance = FastMath.abs(expected * integrator.getRelativeAccuracy());
+        tolerance = AccurateMath.abs(expected * integrator.getRelativeAccuracy());
         result = integrator.integrate(10000, f, min, max);
         Assert.assertTrue(integrator.getEvaluations() < 5000);
         Assert.assertTrue(integrator.getIterations()  < 15);