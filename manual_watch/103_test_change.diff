--- 
+++ 
@@ -70,7 +70,6 @@
           integ.integrate(pb,
                           pb.getInitialTime(), pb.getInitialState(),
                           pb.getFinalTime(), new double[pb.getDimension()]);
-
     }
 
     @Test
@@ -103,9 +102,7 @@
             Assert.assertEquals(integ.getEvaluations(), calls);
             Assert.assertTrue(calls <= previousCalls);
             previousCalls = calls;
-
-        }
-
+        }
     }
 
     @Test(expected = MaxCountExceededException.class)
@@ -121,7 +118,6 @@
         integ.integrate(pb,
                         pb.getInitialTime(), pb.getInitialState(),
                         pb.getFinalTime(), new double[pb.getDimension()]);
-
     }
 
     @Test
@@ -162,7 +158,6 @@
                 Assert.assertTrue(handler.getMaximalValueError() < 5.0e-10);
             }
         }
-
     }
 
     @Test(expected=MathIllegalStateException.class)
@@ -185,7 +180,6 @@
         integ.integrate(pb,
                         pb.getInitialTime(), pb.getInitialState(),
                         pb.getFinalTime(), new double[pb.getDimension()]);
-
     }
 
     private static class PerfectStarter extends AbstractIntegrator {
@@ -212,7 +206,6 @@
                 }
             }
         }
-
     }
 
     private static class PerfectInterpolator implements StepInterpolator {
@@ -296,7 +289,5 @@
         public StepInterpolator copy() {
             return this;
         }
-
-    }
-
+    }
 }