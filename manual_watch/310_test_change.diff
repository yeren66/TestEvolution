--- 
+++ 
@@ -49,84 +49,6 @@
     }
 
     @Test
-    public void testHash() {
-        double[] testArray = {
-            Double.NaN,
-            Double.POSITIVE_INFINITY,
-            Double.NEGATIVE_INFINITY,
-            1d,
-            0d,
-            1E-14,
-            (1 + 1E-14),
-            Double.MIN_VALUE,
-            Double.MAX_VALUE };
-        for (int i = 0; i < testArray.length; i++) {
-            for (int j = 0; j < testArray.length; j++) {
-                if (i == j) {
-                    Assert.assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));
-                    Assert.assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));
-                } else {
-                    Assert.assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));
-                    Assert.assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testArrayHash() {
-        Assert.assertEquals(0, MathUtils.hash((double[]) null));
-        Assert.assertEquals(MathUtils.hash(new double[] {
-                                      Double.NaN, Double.POSITIVE_INFINITY,
-                                      Double.NEGATIVE_INFINITY, 1d, 0d
-                                    }),
-                     MathUtils.hash(new double[] {
-                                      Double.NaN, Double.POSITIVE_INFINITY,
-                                      Double.NEGATIVE_INFINITY, 1d, 0d
-                                    }));
-        Assert.assertFalse(MathUtils.hash(new double[] { 1d }) ==
-                    MathUtils.hash(new double[] { FastMath.nextAfter(1d, 2d) }));
-        Assert.assertFalse(MathUtils.hash(new double[] { 1d }) ==
-                    MathUtils.hash(new double[] { 1d, 1d }));
-    }
-
-    /**
-     * Make sure that permuted arrays do not hash to the same value.
-     */
-    @Test
-    public void testPermutedArrayHash() {
-        double[] original = new double[10];
-        double[] permuted = new double[10];
-
-        final UniformRandomProvider random = RandomSource.create(RandomSource.WELL_512_A,
-                                                                 64925784252L);
-
-        // Generate 10 distinct random values
-        for (int i = 0; i < 10; i++) {
-            final ContinuousDistribution.Sampler u
-                = new UniformContinuousDistribution(i + 0.5, i + 0.75).createSampler(random);
-            original[i] = u.sample();
-        }
-
-        // Generate a random permutation, making sure it is not the identity
-        boolean isIdentity = true;
-        do {
-            int[] permutation = PermutationSampler.natural(10);
-            PermutationSampler.shuffle(random, permutation);
-            for (int i = 0; i < 10; i++) {
-                if (i != permutation[i]) {
-                    isIdentity = false;
-                    break;
-                }
-                permuted[i] = original[permutation[i]];
-            }
-        } while (isIdentity);
-
-        // Verify that permuted array has different hash
-        Assert.assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));
-    }
-
-    @Test
     public void testIndicatorByte() {
         Assert.assertEquals((byte)1, MathUtils.copySign((byte)1, (byte)2));
         Assert.assertEquals((byte)1, MathUtils.copySign((byte)1, (byte)0));