73ce069ff9e0189bf42b9e194c8ea9b907576573
apollo-client/src/test/java/com/ctrip/framework/apollo/internals/XmlConfigFileTest.java
--- 
+++ 
@@ -1,109 +1,112 @@
 package com.ctrip.framework.apollo.internals;
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
 import java.util.Properties;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
  */
 @RunWith(MockitoJUnitRunner.class)
 public class XmlConfigFileTest {
   private String someNamespace;
   @Mock
   private ConfigRepository configRepository;
 
   @Before
   public void setUp() throws Exception {
     someNamespace = "someName";
   }
 
   @Test
   public void testWhenHasContent() throws Exception {
     Properties someProperties = new Properties();
     String key = ConfigConsts.CONFIG_FILE_CONTENT_KEY;
     String someValue = "someValue";
     someProperties.setProperty(key, someValue);
 
     when(configRepository.getConfig()).thenReturn(someProperties);
 
     XmlConfigFile configFile = new XmlConfigFile(someNamespace, configRepository);
 
     assertEquals(ConfigFileFormat.XML, configFile.getConfigFileFormat());
     assertEquals(someNamespace, configFile.getNamespace());
     assertTrue(configFile.hasContent());
     assertEquals(someValue, configFile.getContent());
   }
 
   @Test
   public void testWhenHasNoContent() throws Exception {
     when(configRepository.getConfig()).thenReturn(null);
 
     XmlConfigFile configFile = new XmlConfigFile(someNamespace, configRepository);
 
     assertFalse(configFile.hasContent());
     assertNull(configFile.getContent());
   }
 
   @Test
   public void testWhenConfigRepositoryHasError() throws Exception {
     when(configRepository.getConfig()).thenThrow(new RuntimeException("someError"));
 
     XmlConfigFile configFile = new XmlConfigFile(someNamespace, configRepository);
 
     assertFalse(configFile.hasContent());
     assertNull(configFile.getContent());
   }
 
   @Test
   public void testOnRepositoryChange() throws Exception {
     Properties someProperties = new Properties();
     String key = ConfigConsts.CONFIG_FILE_CONTENT_KEY;
     String someValue = "someValue";
     String anotherValue = "anotherValue";
     someProperties.setProperty(key, someValue);
 
     when(configRepository.getConfig()).thenReturn(someProperties);
 
     XmlConfigFile configFile = new XmlConfigFile(someNamespace, configRepository);
 
     assertEquals(someValue, configFile.getContent());
 
     Properties anotherProperties = new Properties();
     anotherProperties.setProperty(key, anotherValue);
 
     configFile.onRepositoryChange(someNamespace, anotherProperties);
 
     assertEquals(anotherValue, configFile.getContent());
   }
 
   @Test
   public void testWhenConfigRepositoryHasErrorAndThenRecovered() throws Exception {
     Properties someProperties = new Properties();
     String key = ConfigConsts.CONFIG_FILE_CONTENT_KEY;
     String someValue = "someValue";
     someProperties.setProperty(key, someValue);
 
     when(configRepository.getConfig()).thenThrow(new RuntimeException("someError"));
 
     XmlConfigFile configFile = new XmlConfigFile(someNamespace, configRepository);
 
     assertFalse(configFile.hasContent());
     assertNull(configFile.getContent());
 
     configFile.onRepositoryChange(someNamespace, someProperties);
 
     assertTrue(configFile.hasContent());
     assertEquals(someValue, configFile.getContent());
   }
 }