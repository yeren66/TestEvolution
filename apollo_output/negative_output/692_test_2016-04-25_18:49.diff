d5a3d39f0ab5611a4ec686acdf7b7afcab9d70f4
apollo-client/src/test/java/com/ctrip/apollo/ConfigServiceTest.java
--- 
+++ 
@@ -1,99 +1,96 @@
 package com.ctrip.apollo;
 
+import com.ctrip.apollo.core.ConfigConsts;
+import com.ctrip.apollo.internals.AbstractConfig;
 import com.ctrip.apollo.spi.ConfigFactory;
 import com.ctrip.apollo.util.ConfigUtil;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.unidal.lookup.ComponentTestCase;
 
 import static org.junit.Assert.assertEquals;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ConfigServiceTest extends ComponentTestCase {
   private static String someAppId;
 
   @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
     someAppId = "someAppId";
     //as ConfigService is singleton, so we must manually clear its container
     ConfigService.setContainer(getContainer());
     defineComponent(ConfigUtil.class, MockConfigUtil.class);
   }
 
   @Test
   public void testHackConfig() {
     String someNamespace = "hack";
     String someKey = "first";
     ConfigService.setConfig(new MockConfig(someNamespace));
 
-    Config config = ConfigService.getConfig();
+    Config config = ConfigService.getAppConfig();
 
     assertEquals(someNamespace + ":" + someKey, config.getProperty(someKey, null));
     assertEquals(null, config.getProperty("unknown", null));
   }
 
   @Test
   public void testHackConfigFactory() throws Exception {
     String someKey = "someKey";
     ConfigService.setConfigFactory(new MockConfigFactory());
 
-    Config config = ConfigService.getConfig();
+    Config config = ConfigService.getAppConfig();
 
-    assertEquals(someAppId + ":" + someKey,
+    assertEquals(ConfigConsts.NAMESPACE_DEFAULT + ":" + someKey,
         config.getProperty(someKey, null));
   }
 
   @Test
   public void testMockConfigFactory() throws Exception {
     String someNamespace = "mock";
     String someKey = "someKey";
     defineComponent(ConfigFactory.class, someNamespace, MockConfigFactory.class);
 
     Config config = ConfigService.getConfig(someNamespace);
 
     assertEquals(someNamespace + ":" + someKey, config.getProperty(someKey, null));
     assertEquals(null, config.getProperty("unknown", null));
   }
 
-  private static class MockConfig implements Config {
+  private static class MockConfig extends AbstractConfig {
     private final String m_namespace;
 
     public MockConfig(String namespace) {
       m_namespace = namespace;
     }
 
     @Override
     public String getProperty(String key, String defaultValue) {
       if (key.equals("unknown")) {
         return null;
       }
 
       return m_namespace + ":" + key;
-    }
-
-    @Override
-    public void addChangeListener(ConfigChangeListener listener) {
-
     }
   }
 
   public static class MockConfigFactory implements ConfigFactory {
     @Override
     public Config create(String namespace) {
       return new MockConfig(namespace);
     }
   }
 
   public static class MockConfigUtil extends ConfigUtil {
     @Override
     public String getAppId() {
       return someAppId;
     }
   }
 
 }