[
    {
        "commit": "05ca93eace893a75e886a19739778a67bd3a18bc",
        "file_path": "src/main/java/com/thealgorithms/maths/Area.java",
        "old_content": "package com.thealgorithms.maths;\n\n/**\n * Find the area of various geometric shapes\n */\npublic class Area {\n\n    /**\n     * String of IllegalArgumentException for radius\n     */\n    private static final String POSITIVE_RADIUS = \"Must be a positive radius\";\n\n    /**\n     * String of IllegalArgumentException for height\n     */\n    private static final String POSITIVE_HEIGHT = \"Must be a positive height\";\n\n    /**\n     * String of IllegalArgumentException for base\n     */\n    private static final String POSITIVE_BASE = \"Must be a positive base\";\n\n    /**\n     * Calculate the surface area of a cube.\n     *\n     * @param sideLength side length of cube\n     * @return surface area of given cube\n     */\n    public static double surfaceAreaCube(final double sideLength) {\n        if (sideLength <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive sideLength\");\n        }\n        return 6 * sideLength * sideLength;\n    }\n\n    /**\n     * Calculate the surface area of a sphere.\n     *\n     * @param radius radius of sphere\n     * @return surface area of given sphere\n     */\n    public static double surfaceAreaSphere(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 4 * Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the area of a rectangle.\n     *\n     * @param length length of a rectangle\n     * @param width  width of a rectangle\n     * @return area of given rectangle\n     */\n    public static double surfaceAreaRectangle(final double length, final double width) {\n        if (length <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive length\");\n        }\n        if (width <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive width\");\n        }\n        return length * width;\n    }\n\n    /**\n     * Calculate surface area of a cylinder.\n     *\n     * @param radius radius of the floor\n     * @param height height of the cylinder.\n     * @return volume of given cylinder\n     */\n    public static double surfaceAreaCylinder(final double radius, final double height) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 2 * (Math.PI * radius * radius + Math.PI * radius * height);\n    }\n\n    /**\n     * Calculate the area of a square.\n     *\n     * @param sideLength side length of square\n     * @return area of given square\n     */\n    public static double surfaceAreaSquare(final double sideLength) {\n        if (sideLength <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive sideLength\");\n        }\n        return sideLength * sideLength;\n    }\n\n    /**\n     * Calculate the area of a triangle.\n     *\n     * @param base   base of triangle\n     * @param height height of triangle\n     * @return area of given triangle\n     */\n    public static double surfaceAreaTriangleRectangle(final double base, final double height) {\n        if (base <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return base * height / 2;\n    }\n\n    /**\n     * Calculate the area of a parallelogram.\n     *\n     * @param base   base of a parallelogram\n     * @param height height of a parallelogram\n     * @return area of given parallelogram\n     */\n    public static double surfaceAreaParallelogram(final double base, final double height) {\n        if (base <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return base * height;\n    }\n\n    /**\n     * Calculate the area of a trapezium.\n     *\n     * @param base1  upper base of trapezium\n     * @param base2  bottom base of trapezium\n     * @param height height of trapezium\n     * @return area of given trapezium\n     */\n    public static double surfaceAreaTrapezium(final double base1, final double base2, final double height) {\n        if (base1 <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE + 1);\n        }\n        if (base2 <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE + 2);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return (base1 + base2) * height / 2;\n    }\n\n    /**\n     * Calculate the area of a circle.\n     *\n     * @param radius radius of circle\n     * @return area of given circle\n     */\n    public static double surfaceAreaCircle(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the surface area of a hemisphere.\n     *\n     * @param radius radius of hemisphere\n     * @return surface area of given hemisphere\n     */\n    public static double surfaceAreaHemisphere(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 3 * Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the surface area of a cone.\n     *\n     * @param radius radius of cone.\n     * @param height of cone.\n     * @return surface area of given cone.\n     */\n    public static double surfaceAreaCone(final double radius, final double height) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return Math.PI * radius * (radius + Math.pow(height * height + radius * radius, 0.5));\n    }\n}\n",
        "new_content": "package com.thealgorithms.maths;\n\n/**\n * Find the area of various geometric shapes\n */\npublic class Area {\n\n    /**\n     * String of IllegalArgumentException for radius\n     */\n    private static final String POSITIVE_RADIUS = \"Must be a positive radius\";\n\n    /**\n     * String of IllegalArgumentException for height\n     */\n    private static final String POSITIVE_HEIGHT = \"Must be a positive height\";\n\n    /**\n     * String of IllegalArgumentException for base\n     */\n    private static final String POSITIVE_BASE = \"Must be a positive base\";\n\n    /**\n     * Calculate the surface area of a cube.\n     *\n     * @param sideLength side length of cube\n     * @return surface area of given cube\n     */\n    public static double surfaceAreaCube(final double sideLength) {\n        if (sideLength <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive sideLength\");\n        }\n        return 6 * sideLength * sideLength;\n    }\n\n    /**\n     * Calculate the surface area of a sphere.\n     *\n     * @param radius radius of sphere\n     * @return surface area of given sphere\n     */\n    public static double surfaceAreaSphere(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 4 * Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the area of a rectangle.\n     *\n     * @param length length of a rectangle\n     * @param width  width of a rectangle\n     * @return area of given rectangle\n     */\n    public static double surfaceAreaRectangle(final double length, final double width) {\n        if (length <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive length\");\n        }\n        if (width <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive width\");\n        }\n        return length * width;\n    }\n\n    /**\n     * Calculate surface area of a cylinder.\n     *\n     * @param radius radius of the floor\n     * @param height height of the cylinder.\n     * @return volume of given cylinder\n     */\n    public static double surfaceAreaCylinder(final double radius, final double height) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 2 * (Math.PI * radius * radius + Math.PI * radius * height);\n    }\n\n    /**\n     * Calculate the area of a square.\n     *\n     * @param sideLength side length of square\n     * @return area of given square\n     */\n    public static double surfaceAreaSquare(final double sideLength) {\n        if (sideLength <= 0) {\n            throw new IllegalArgumentException(\"Must be a positive sideLength\");\n        }\n        return sideLength * sideLength;\n    }\n\n    /**\n     * Calculate the area of a triangle.\n     *\n     * @param base   base of triangle\n     * @param height height of triangle\n     * @return area of given triangle\n     */\n    public static double surfaceAreaTriangleRectangle(final double base, final double height) {\n        if (base <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return base * height / 2;\n    }\n\n    /**\n     * Calculate the area of a parallelogram.\n     *\n     * @param base   base of a parallelogram\n     * @param height height of a parallelogram\n     * @return area of given parallelogram\n     */\n    public static double surfaceAreaParallelogram(final double base, final double height) {\n        if (base <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return base * height;\n    }\n\n    /**\n     * Calculate the area of a trapezium.\n     *\n     * @param base1  upper base of trapezium\n     * @param base2  bottom base of trapezium\n     * @param height height of trapezium\n     * @return area of given trapezium\n     */\n    public static double surfaceAreaTrapezium(final double base1, final double base2, final double height) {\n        if (base1 <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE + 1);\n        }\n        if (base2 <= 0) {\n            throw new IllegalArgumentException(POSITIVE_BASE + 2);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return (base1 + base2) * height / 2;\n    }\n\n    /**\n     * Calculate the area of a circle.\n     *\n     * @param radius radius of circle\n     * @return area of given circle\n     */\n    public static double surfaceAreaCircle(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the surface area of a hemisphere.\n     *\n     * @param radius radius of hemisphere\n     * @return surface area of given hemisphere\n     */\n    public static double surfaceAreaHemisphere(final double radius) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        return 3 * Math.PI * radius * radius;\n    }\n\n    /**\n     * Calculate the surface area of a cone.\n     *\n     * @param radius radius of cone.\n     * @param height of cone.\n     * @return surface area of given cone.\n     */\n    public static double surfaceAreaCone(final double radius, final double height) {\n        if (radius <= 0) {\n            throw new IllegalArgumentException(POSITIVE_RADIUS);\n        }\n        if (height <= 0) {\n            throw new IllegalArgumentException(POSITIVE_HEIGHT);\n        }\n        return Math.PI * radius * (radius + Math.pow(height * height + radius * radius, 0.5));\n    }\n}\n"
    },
    {
        "commit": "05ca93eace893a75e886a19739778a67bd3a18bc",
        "file_path": "src/test/java/com/thealgorithms/maths/AreaTest.java",
        "old_content": "package com.thealgorithms.maths;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * @author Amarildo Aliaj\n */\nclass AreaTest {\n\n    @Test\n    void testSurfaceAreaCube() {\n        assertEquals(6.0, Area.surfaceAreaCube(1));\n    }\n\n    @Test\n    void testSurfaceAreaSphere() {\n        assertEquals(12.566370614359172, Area.surfaceAreaSphere(1));\n    }\n\n    @Test\n    void testSurfaceAreaRectangle() {\n        assertEquals(200.0, Area.surfaceAreaRectangle(10, 20));\n    }\n\n    @Test\n    void testSurfaceAreaCylinder() {\n        assertEquals(18.84955592153876, Area.surfaceAreaCylinder(1, 2));\n    }\n\n    @Test\n    void testSurfaceAreaSquare() {\n        assertEquals(100.0, Area.surfaceAreaSquare(10));\n    }\n\n    @Test\n    void testSurfaceAreaTriangleRectangle() {\n        assertEquals(50.0, Area.surfaceAreaTriangleRectangle(10, 10));\n    }\n\n    @Test\n    void testSurfaceAreaParallelogram() {\n        assertEquals(200.0, Area.surfaceAreaParallelogram(10, 20));\n    }\n\n    @Test\n    void testSurfaceAreaTrapezium() {\n        assertEquals(450.0, Area.surfaceAreaTrapezium(10, 20, 30));\n    }\n\n    @Test\n    void testSurfaceAreaCircle() {\n        assertEquals(1256.6370614359173, Area.surfaceAreaCircle(20));\n    }\n\n    @Test\n    void surfaceAreaHemisphere() {\n        assertEquals(235.61944901923448, Area.surfaceAreaHemisphere(5));\n    }\n\n    @Test\n    void surfaceAreaCone() {\n        assertEquals(301.59289474462014, Area.surfaceAreaCone(6, 8));\n    }\n\n    @Test\n    void testAllIllegalInput() {\n        assertAll(()\n                      -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCube(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSphere(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(0, 10)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(10, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSquare(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangleRectangle(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangleRectangle(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(0, 1, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCircle(0)),\n            () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaHemisphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(0, 1)));\n    }\n}",
        "new_content": "package com.thealgorithms.maths;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\n/**\n * @author Amarildo Aliaj\n */\nclass AreaTest {\n\n    @Test\n    void testSurfaceAreaCube() {\n        assertEquals(6.0, Area.surfaceAreaCube(1));\n    }\n\n    @Test\n    void testSurfaceAreaSphere() {\n        assertEquals(12.566370614359172, Area.surfaceAreaSphere(1));\n    }\n\n    @Test\n    void testSurfaceAreaRectangle() {\n        assertEquals(200.0, Area.surfaceAreaRectangle(10, 20));\n    }\n\n    @Test\n    void testSurfaceAreaCylinder() {\n        assertEquals(18.84955592153876, Area.surfaceAreaCylinder(1, 2));\n    }\n\n    @Test\n    void testSurfaceAreaSquare() {\n        assertEquals(100.0, Area.surfaceAreaSquare(10));\n    }\n\n    @Test\n    void testSurfaceAreaTriangleRectangle() {\n        assertEquals(50.0, Area.surfaceAreaTriangleRectangle(10, 10));\n    }\n\n    @Test\n    void testSurfaceAreaParallelogram() {\n        assertEquals(200.0, Area.surfaceAreaParallelogram(10, 20));\n    }\n\n    @Test\n    void testSurfaceAreaTrapezium() {\n        assertEquals(450.0, Area.surfaceAreaTrapezium(10, 20, 30));\n    }\n\n    @Test\n    void testSurfaceAreaCircle() {\n        assertEquals(1256.6370614359173, Area.surfaceAreaCircle(20));\n    }\n\n    @Test\n    void surfaceAreaHemisphere() {\n        assertEquals(235.61944901923448, Area.surfaceAreaHemisphere(5));\n    }\n\n    @Test\n    void surfaceAreaCone() {\n        assertEquals(301.59289474462014, Area.surfaceAreaCone(6, 8));\n    }\n\n    @Test\n    void testAllIllegalInput() {\n        assertAll(()\n                      -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCube(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSphere(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(0, 10)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(10, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSquare(0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangleRectangle(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangleRectangle(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(0, 1, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 0, 1)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 1, 0)),\n            ()\n                -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCircle(0)),\n            () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaHemisphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(0, 1)));\n    }\n}"
    }
]