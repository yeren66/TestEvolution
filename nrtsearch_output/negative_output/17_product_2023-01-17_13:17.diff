c09c2b3a42227c3fe60ca9f8ca6fe5ee7c72a69a
src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java
--- 
+++ 
@@ -118,45 +118,10 @@
     String serviceName = luceneServerConfiguration.getServiceName();
     String nodeName = luceneServerConfiguration.getNodeName();
 
-    GlobalState globalState;
-    LuceneServerImpl serverImpl;
-
-    // For legacy index state, the GlobalState is created first and passed into
-    // the LuceneServerImpl. For the newer state handling, the GlobalState loads the
-    // IndexState, and must be created after the extendable components are initialized
-    if (luceneServerConfiguration.getStateConfig().useLegacyStateManagement()) {
-      globalState = GlobalState.createState(luceneServerConfiguration, incArchiver);
-
-      // Only do state restore if using legacy state management.
-      // Otherwise, this will be done during GlobalState initialization.
-      if (luceneServerConfiguration.getRestoreState()) {
-        logger.info("Loading state for any previously backed up indexes");
-        List<String> indexes =
-            RestoreStateHandler.restore(
-                archiver,
-                incArchiver,
-                globalState,
-                luceneServerConfiguration.getServiceName(),
-                luceneServerConfiguration.getRestoreFromIncArchiver());
-        for (String index : indexes) {
-          logger.info("Loaded state for index " + index);
-        }
-      }
-
-      serverImpl =
-          new LuceneServerImpl(
-              globalState,
-              luceneServerConfiguration,
-              archiver,
-              incArchiver,
-              collectorRegistry,
-              plugins);
-    } else {
-      serverImpl =
-          new LuceneServerImpl(
-              luceneServerConfiguration, archiver, incArchiver, collectorRegistry, plugins);
-      globalState = serverImpl.getGlobalState();
-    }
+    LuceneServerImpl serverImpl =
+        new LuceneServerImpl(
+            luceneServerConfiguration, archiver, incArchiver, collectorRegistry, plugins);
+    GlobalState globalState = serverImpl.getGlobalState();
 
     registerMetrics(globalState);
 
@@ -324,29 +289,6 @@
     private final ThreadPoolExecutor searchThreadPoolExecutor;
     private final String archiveDirectory;
     private final boolean backupFromIncArchiver;
-    private final boolean restoreFromIncArchiver;
-
-    LuceneServerImpl(
-        GlobalState globalState,
-        LuceneServerConfiguration configuration,
-        Archiver archiver,
-        Archiver incArchiver,
-        CollectorRegistry collectorRegistry,
-        List<Plugin> plugins) {
-      this.globalState = globalState;
-      this.archiver = archiver;
-      this.incArchiver = incArchiver;
-      this.archiveDirectory = configuration.getArchiveDirectory();
-      this.collectorRegistry = collectorRegistry;
-      this.searchThreadPoolExecutor = globalState.getSearchThreadPoolExecutor();
-      this.backupFromIncArchiver = configuration.getBackupWithInArchiver();
-      this.restoreFromIncArchiver = configuration.getRestoreFromIncArchiver();
-
-      DeadlineUtils.setCancellationEnabled(configuration.getDeadlineCancellation());
-
-      initQueryCache(configuration);
-      initExtendableComponents(configuration, plugins);
-    }
 
     /**
      * Constructor used with newer state handling. Defers initialization of global state until after
@@ -371,7 +313,6 @@
       this.archiveDirectory = configuration.getArchiveDirectory();
       this.collectorRegistry = collectorRegistry;
       this.backupFromIncArchiver = configuration.getBackupWithInArchiver();
-      this.restoreFromIncArchiver = configuration.getRestoreFromIncArchiver();
 
       DeadlineUtils.setCancellationEnabled(configuration.getDeadlineCancellation());
       CompletionPostingsFormatUtil.setCompletionCodecLoadMode(
@@ -456,13 +397,6 @@
 
       try {
         IndexState indexState = globalState.createIndex(req);
-        // shards are initialized elsewhere for non-legacy state
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          // Create the first shard
-          logger.info("NOW ADD SHARD 0");
-          indexState.addShard(0, true);
-          logger.info("DONE ADD SHARD 0");
-        }
         String response = String.format("Created Index name: %s", indexName);
         CreateIndexResponse reply = CreateIndexResponse.newBuilder().setResponse(response).build();
         responseObserver.onNext(reply);
@@ -558,16 +492,10 @@
         FieldDefRequest fieldDefRequest, StreamObserver<FieldDefResponse> responseObserver) {
       logger.info("Received register fields request: {}", fieldDefRequest);
       try {
-        FieldDefResponse reply;
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          IndexState indexState = globalState.getIndex(fieldDefRequest.getIndexName());
-          reply = new RegisterFieldsHandler().handle(indexState, fieldDefRequest);
-        } else {
-          IndexStateManager indexStateManager =
-              globalState.getIndexStateManager(fieldDefRequest.getIndexName());
-          reply = FieldUpdateHandler.handle(indexStateManager, fieldDefRequest);
-        }
-        logger.info("RegisterFieldsHandler registered fields " + reply.toString());
+        IndexStateManager indexStateManager =
+            globalState.getIndexStateManager(fieldDefRequest.getIndexName());
+        FieldDefResponse reply = FieldUpdateHandler.handle(indexStateManager, fieldDefRequest);
+        logger.info("RegisterFieldsHandler registered fields " + reply);
         responseObserver.onNext(reply);
         responseObserver.onCompleted();
       } catch (IOException e) {
@@ -601,16 +529,10 @@
         FieldDefRequest fieldDefRequest, StreamObserver<FieldDefResponse> responseObserver) {
       logger.info("Received update fields request: {}", fieldDefRequest);
       try {
-        FieldDefResponse reply;
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          IndexState indexState = globalState.getIndex(fieldDefRequest.getIndexName());
-          reply = new UpdateFieldsHandler().handle(indexState, fieldDefRequest);
-        } else {
-          IndexStateManager indexStateManager =
-              globalState.getIndexStateManager(fieldDefRequest.getIndexName());
-          reply = FieldUpdateHandler.handle(indexStateManager, fieldDefRequest);
-        }
-        logger.info("UpdateFieldsHandler registered fields " + reply.toString());
+        IndexStateManager indexStateManager =
+            globalState.getIndexStateManager(fieldDefRequest.getIndexName());
+        FieldDefResponse reply = FieldUpdateHandler.handle(indexStateManager, fieldDefRequest);
+        logger.info("UpdateFieldsHandler registered fields " + reply);
         responseObserver.onNext(reply);
         responseObserver.onCompleted();
       } catch (IOException e) {
@@ -729,27 +651,8 @@
         return;
       }
       try {
-        StartIndexResponse reply;
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          IndexState indexState;
-          StartIndexHandler startIndexHandler =
-              new StartIndexHandler(
-                  archiver,
-                  incArchiver,
-                  archiveDirectory,
-                  backupFromIncArchiver,
-                  restoreFromIncArchiver,
-                  true,
-                  null,
-                  globalState.getConfiguration().getDiscoveryFileUpdateIntervalMs());
-
-          indexState =
-              globalState.getIndex(
-                  startIndexRequest.getIndexName(), startIndexRequest.hasRestore());
-          reply = startIndexHandler.handle(indexState, startIndexRequest);
-        } else {
-          reply = globalState.startIndex(startIndexRequest);
-        }
+        StartIndexResponse reply = globalState.startIndex(startIndexRequest);
+
         logger.info("StartIndexHandler returned " + reply.toString());
         responseObserver.onNext(reply);
         responseObserver.onCompleted();
@@ -784,12 +687,6 @@
         StreamObserver<StartIndexResponse> responseObserver) {
       logger.info("Received start index v2 request: {}", startIndexRequest);
       try {
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          responseObserver.onError(
-              new IllegalStateException("statIndexV2 not usable with legacy state management"));
-          return;
-        }
-
         StartIndexResponse reply = globalState.startIndexV2(startIndexRequest);
         logger.info("StartIndexV2Handler returned " + reply.toString());
         responseObserver.onNext(reply);
@@ -1350,13 +1247,8 @@
         StopIndexRequest stopIndexRequest, StreamObserver<DummyResponse> responseObserver) {
       logger.info("Received stop index request: {}", stopIndexRequest);
       try {
-        DummyResponse reply;
-        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-          IndexState indexState = globalState.getIndex(stopIndexRequest.getIndexName());
-          reply = new StopIndexHandler().handle(indexState, stopIndexRequest);
-        } else {
-          reply = globalState.stopIndex(stopIndexRequest);
-        }
+        DummyResponse reply = globalState.stopIndex(stopIndexRequest);
+
         logger.info("StopIndexHandler returned " + reply.toString());
         responseObserver.onNext(reply);
         responseObserver.onCompleted();
@@ -1374,11 +1266,6 @@
     @Override
     public void reloadState(
         ReloadStateRequest request, StreamObserver<ReloadStateResponse> responseObserver) {
-      if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
-        responseObserver.onError(
-            Status.UNAVAILABLE.withDescription("legacy state not supported").asRuntimeException());
-        return;
-      }
       try {
         if (globalState.getConfiguration().getIndexStartConfig().getMode().equals(Mode.REPLICA)) {
           globalState.reloadStateFromBackend();