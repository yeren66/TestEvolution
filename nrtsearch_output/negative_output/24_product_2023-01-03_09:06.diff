1616680944204904f7a07b262ac7d6286b6ef259
src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java
--- 
+++ 
@@ -778,6 +778,46 @@
     }
 
     @Override
+    public void startIndexV2(
+        StartIndexV2Request startIndexRequest,
+        StreamObserver<StartIndexResponse> responseObserver) {
+      logger.info("Received start index v2 request: {}", startIndexRequest);
+      try {
+        if (globalState.getConfiguration().getStateConfig().useLegacyStateManagement()) {
+          responseObserver.onError(
+              new IllegalStateException("statIndexV2 not usable with legacy state management"));
+          return;
+        }
+
+        StartIndexResponse reply = globalState.startIndexV2(startIndexRequest);
+        logger.info("StartIndexV2Handler returned " + reply.toString());
+        responseObserver.onNext(reply);
+        responseObserver.onCompleted();
+      } catch (IOException e) {
+        logger.warn(
+            "error while trying to read index state dir for indexName: "
+                + startIndexRequest.getIndexName(),
+            e);
+        responseObserver.onError(
+            Status.INTERNAL
+                .withDescription(
+                    "error while trying to read index state dir for indexName: "
+                        + startIndexRequest.getIndexName())
+                .augmentDescription(e.getMessage())
+                .withCause(e)
+                .asRuntimeException());
+      } catch (Exception e) {
+        logger.warn("error while trying to start index " + startIndexRequest.getIndexName(), e);
+        responseObserver.onError(
+            Status.INVALID_ARGUMENT
+                .withDescription(
+                    "error while trying to start index: " + startIndexRequest.getIndexName())
+                .augmentDescription(e.getMessage())
+                .asRuntimeException());
+      }
+    }
+
+    @Override
     public StreamObserver<AddDocumentRequest> addDocuments(
         StreamObserver<AddDocumentResponse> responseObserver) {
 