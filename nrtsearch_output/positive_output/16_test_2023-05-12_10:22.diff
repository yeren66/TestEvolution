e750b96154aff11d3d17a50a29aa2bc88a89b965
src/test/java/com/yelp/nrtsearch/server/luceneserver/search/collectors/additional/IntTermsCollectorManagerTest.java
--- 
+++ 
@@ -15,7 +15,11 @@
  */
 package com.yelp.nrtsearch.server.luceneserver.search.collectors.additional;
 
+import static com.yelp.nrtsearch.server.collectors.BucketOrder.COUNT;
+
 import com.yelp.nrtsearch.server.grpc.AddDocumentRequest;
+import com.yelp.nrtsearch.server.grpc.BucketOrder;
+import com.yelp.nrtsearch.server.grpc.BucketOrder.OrderType;
 import com.yelp.nrtsearch.server.grpc.FieldDefRequest;
 import com.yelp.nrtsearch.server.grpc.SearchResponse;
 import com.yelp.nrtsearch.server.grpc.TermsCollector;
@@ -37,6 +41,8 @@
 
   @Override
   protected AddDocumentRequest getIndexRequest(String index, int id) {
+    int valueOrder = id / 10 + id % 10;
+    valueOrder = valueOrder < 10 ? valueOrder : -1;
     return AddDocumentRequest.newBuilder()
         .setIndexName(index)
         .putFields(
@@ -51,11 +57,22 @@
                 .addValue(String.valueOf(id % 3))
                 .build())
         .putFields(
+            "value_order",
+            AddDocumentRequest.MultiValuedField.newBuilder()
+                .addValue(String.valueOf(valueOrder))
+                .build())
+        .putFields(
             "value_multi",
             AddDocumentRequest.MultiValuedField.newBuilder()
                 .addValue(String.valueOf(id % 2))
                 .addValue(String.valueOf(id % 5))
                 .build())
+        .putFields(
+            "value_multi_order",
+            AddDocumentRequest.MultiValuedField.newBuilder()
+                .addValue(String.valueOf(valueOrder))
+                .addValue(String.valueOf(valueOrder % 3))
+                .build())
         .build();
   }
 
@@ -73,6 +90,11 @@
   }
 
   @Test
+  public void testTermsCollection_order() {
+    testTermsCollectionOrder();
+  }
+
+  @Test
   public void testTermsCollectionSubset() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VALUE_FIELD).setSize(1).build();
     SearchResponse response = doQuery(terms);
@@ -81,6 +103,11 @@
   }
 
   @Test
+  public void testTermsCollectionSubset_order() {
+    testTermsCollectionSubsetOrder();
+  }
+
+  @Test
   public void testTermsCollectionGreaterSize() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VALUE_FIELD).setSize(10).build();
     SearchResponse response = doQuery(terms);
@@ -94,6 +121,11 @@
   }
 
   @Test
+  public void testTermsCollectionGreaterSize_order() {
+    testTermsCollectionGreaterSizeOrder();
+  }
+
+  @Test
   public void testTermsMultiCollection() {
     TermsCollector terms =
         TermsCollector.newBuilder().setField(VALUE_MULTI_FIELD).setSize(5).build();
@@ -108,12 +140,22 @@
   }
 
   @Test
+  public void testTermsMultiCollection_order() {
+    testTermsMultiCollectionOrder();
+  }
+
+  @Test
   public void testTermsMultiCollectionSubset() {
     TermsCollector terms =
         TermsCollector.newBuilder().setField(VALUE_MULTI_FIELD).setSize(2).build();
     SearchResponse response = doQuery(terms);
     assertResponse(
         response, 5, 2, 60, new ExpectedValues(new HashSet<>(Arrays.asList("0", "1")), 70));
+  }
+
+  @Test
+  public void testTermsMultiCollectionSubset_order() {
+    testTermsMultiCollectionSubsetOrder();
   }
 
   @Test
@@ -131,6 +173,11 @@
   }
 
   @Test
+  public void testTermsMultiCollectionGreaterSize_order() {
+    testTermsMultiCollectionGreaterSizeOrder();
+  }
+
+  @Test
   public void testTermsRange() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VALUE_FIELD).setSize(3).build();
     SearchResponse response = doRangeQuery(terms);
@@ -144,6 +191,11 @@
   }
 
   @Test
+  public void testTermsRange_order() {
+    testTermsRangeOrder();
+  }
+
+  @Test
   public void testTermsRangeSubset() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VALUE_FIELD).setSize(1).build();
     SearchResponse response = doRangeQuery(terms);
@@ -152,6 +204,11 @@
   }
 
   @Test
+  public void testTermsRangeSubset_order() {
+    testTermsRangeSubsetOrder();
+  }
+
+  @Test
   public void testTermsMultiRange() {
     TermsCollector terms =
         TermsCollector.newBuilder().setField(VALUE_MULTI_FIELD).setSize(5).build();
@@ -166,12 +223,22 @@
   }
 
   @Test
+  public void testTermsMultiRange_order() {
+    testTermsMultiRangeOrder();
+  }
+
+  @Test
   public void testTermsMultiRangeSubset() {
     TermsCollector terms =
         TermsCollector.newBuilder().setField(VALUE_MULTI_FIELD).setSize(2).build();
     SearchResponse response = doRangeQuery(terms);
     assertResponse(
         response, 5, 2, 6, new ExpectedValues(new HashSet<>(Arrays.asList("0", "1")), 7));
+  }
+
+  @Test
+  public void testTermsMultiRangeSubset_order() {
+    testTermsMultiRangeSubsetOrder();
   }
 
   @Test
@@ -180,4 +247,21 @@
     SearchResponse response = doNestedQuery(terms);
     assertNestedResult(response);
   }
+
+  @Test
+  public void testNestedCollector_asc() {
+    TermsCollector terms =
+        TermsCollector.newBuilder()
+            .setField(VALUE_FIELD)
+            .setOrder(BucketOrder.newBuilder().setKey(COUNT).setOrder(OrderType.ASC).build())
+            .setSize(3)
+            .build();
+    SearchResponse response = doNestedQuery(terms);
+    assertNestedResult(response);
+  }
+
+  @Test
+  public void testOrderByNestedCollector() {
+    super.testOrderByNestedCollector();
+  }
 }