1ef48c6f3978beedf21b8f70ed101037e68674a7
src/main/java/com/yelp/nrtsearch/server/luceneserver/index/BackendStateManager.java
--- 
+++ 
@@ -48,6 +48,7 @@
   private final String indexName;
   private final String indexUniqueName;
   private final String id;
+  private final IndexLiveSettings liveSettingsOverrides;
   private final StateBackend stateBackend;
   private final GlobalState globalState;
 
@@ -59,14 +60,20 @@
    *
    * @param indexName index name
    * @param id index instance id
+   * @param liveSettingsOverrides local overrides for index live settings
    * @param stateBackend state backend
    * @param globalState global state
    */
   public BackendStateManager(
-      String indexName, String id, StateBackend stateBackend, GlobalState globalState) {
+      String indexName,
+      String id,
+      IndexLiveSettings liveSettingsOverrides,
+      StateBackend stateBackend,
+      GlobalState globalState) {
     this.indexName = indexName;
     this.id = id;
     this.indexUniqueName = BackendGlobalState.getUniqueIndexName(indexName, id);
+    this.liveSettingsOverrides = liveSettingsOverrides;
     this.stateBackend = stateBackend;
     this.globalState = globalState;
   }
@@ -84,7 +91,8 @@
     UpdatedFieldInfo updatedFieldInfo =
         FieldUpdateHandler.updateFields(
             new FieldAndFacetState(), Collections.emptyMap(), stateInfo.getFieldsMap().values());
-    currentState = createIndexState(stateInfo, updatedFieldInfo.fieldAndFacetState);
+    currentState =
+        createIndexState(stateInfo, updatedFieldInfo.fieldAndFacetState, liveSettingsOverrides);
   }
 
   /**
@@ -115,7 +123,8 @@
       throw new IllegalStateException("Creating index, but state already exists for: " + indexName);
     }
     stateInfo = getDefaultStateInfo();
-    ImmutableIndexState indexState = createIndexState(stateInfo, new FieldAndFacetState());
+    ImmutableIndexState indexState =
+        createIndexState(stateInfo, new FieldAndFacetState(), liveSettingsOverrides);
     stateBackend.commitIndexState(indexUniqueName, stateInfo);
     currentState = indexState;
   }
@@ -140,19 +149,20 @@
     }
     IndexStateInfo updatedStateInfo = mergeSettings(currentState.getCurrentStateInfo(), settings);
     ImmutableIndexState updatedIndexState =
-        createIndexState(updatedStateInfo, currentState.getFieldAndFacetState());
+        createIndexState(
+            updatedStateInfo, currentState.getFieldAndFacetState(), liveSettingsOverrides);
     stateBackend.commitIndexState(indexUniqueName, updatedStateInfo);
     currentState = updatedIndexState;
     return updatedIndexState.getMergedSettings();
   }
 
   @Override
-  public IndexLiveSettings getLiveSettings() {
+  public IndexLiveSettings getLiveSettings(boolean withLocal) {
     ImmutableIndexState indexState = currentState;
     if (indexState == null) {
       throw new IllegalStateException("No state for index: " + indexName);
     }
-    return indexState.getMergedLiveSettings();
+    return indexState.getMergedLiveSettings(withLocal);
   }
 
   @Override
@@ -165,13 +175,14 @@
     IndexStateInfo updatedStateInfo =
         mergeLiveSettings(currentState.getCurrentStateInfo(), liveSettings);
     ImmutableIndexState updatedIndexState =
-        createIndexState(updatedStateInfo, currentState.getFieldAndFacetState());
+        createIndexState(
+            updatedStateInfo, currentState.getFieldAndFacetState(), liveSettingsOverrides);
     stateBackend.commitIndexState(indexUniqueName, updatedStateInfo);
     currentState = updatedIndexState;
     for (Map.Entry<Integer, ShardState> entry : currentState.getShards().entrySet()) {
       entry.getValue().updatedLiveSettings(liveSettings);
     }
-    return updatedIndexState.getMergedLiveSettings();
+    return updatedIndexState.getMergedLiveSettings(false);
   }
 
   @Override
@@ -187,7 +198,8 @@
     IndexStateInfo updatedStateInfo =
         replaceFields(currentState.getCurrentStateInfo(), updatedFieldInfo.fields);
     ImmutableIndexState updatedIndexState =
-        createIndexState(updatedStateInfo, updatedFieldInfo.fieldAndFacetState);
+        createIndexState(
+            updatedStateInfo, updatedFieldInfo.fieldAndFacetState, liveSettingsOverrides);
     stateBackend.commitIndexState(indexUniqueName, updatedStateInfo);
     currentState = updatedIndexState;
     return updatedIndexState.getAllFieldsJSON();
@@ -215,7 +227,8 @@
               .setGen(currentState.getCurrentStateInfo().getGen() + 1)
               .build();
       ImmutableIndexState updatedIndexState =
-          createIndexState(updatedStateInfo, currentState.getFieldAndFacetState());
+          createIndexState(
+              updatedStateInfo, currentState.getFieldAndFacetState(), liveSettingsOverrides);
       stateBackend.commitIndexState(indexUniqueName, updatedStateInfo);
       currentState = updatedIndexState;
     }
@@ -232,7 +245,10 @@
 
   // Declared protected for use during testing
   protected ImmutableIndexState createIndexState(
-      IndexStateInfo indexStateInfo, FieldAndFacetState fieldAndFacetState) throws IOException {
+      IndexStateInfo indexStateInfo,
+      FieldAndFacetState fieldAndFacetState,
+      IndexLiveSettings liveSettingsOverrides)
+      throws IOException {
     Map<Integer, ShardState> previousShardState =
         currentState == null ? null : currentState.getShards();
     return new ImmutableIndexState(
@@ -242,6 +258,7 @@
         indexUniqueName,
         indexStateInfo,
         fieldAndFacetState,
+        liveSettingsOverrides,
         previousShardState);
   }
 