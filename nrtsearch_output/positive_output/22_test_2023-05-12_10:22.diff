e750b96154aff11d3d17a50a29aa2bc88a89b965
src/test/java/com/yelp/nrtsearch/server/luceneserver/search/collectors/additional/VirtualTermsCollectorManagerTest.java
--- 
+++ 
@@ -15,7 +15,11 @@
  */
 package com.yelp.nrtsearch.server.luceneserver.search.collectors.additional;
 
+import static com.yelp.nrtsearch.server.collectors.BucketOrder.COUNT;
+
 import com.yelp.nrtsearch.server.grpc.AddDocumentRequest;
+import com.yelp.nrtsearch.server.grpc.BucketOrder;
+import com.yelp.nrtsearch.server.grpc.BucketOrder.OrderType;
 import com.yelp.nrtsearch.server.grpc.Collector;
 import com.yelp.nrtsearch.server.grpc.FieldDefRequest;
 import com.yelp.nrtsearch.server.grpc.FunctionScoreQuery;
@@ -46,6 +50,8 @@
 
   @Override
   protected AddDocumentRequest getIndexRequest(String index, int id) {
+    int valueOrder = id / 10 + id % 10;
+    valueOrder = valueOrder < 10 ? valueOrder : -1;
     return AddDocumentRequest.newBuilder()
         .setIndexName(index)
         .putFields(
@@ -59,6 +65,11 @@
             AddDocumentRequest.MultiValuedField.newBuilder()
                 .addValue(String.valueOf(id % 3))
                 .build())
+        .putFields(
+            "value_order",
+            AddDocumentRequest.MultiValuedField.newBuilder()
+                .addValue(String.valueOf(valueOrder))
+                .build())
         .build();
   }
 
@@ -76,6 +87,11 @@
   }
 
   @Test
+  public void testTermsCollection_order() {
+    testTermsCollectionOrder();
+  }
+
+  @Test
   public void testTermsCollectionSubset() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VIRTUAL_FIELD).setSize(1).build();
     SearchResponse response = doQuery(terms);
@@ -88,6 +104,11 @@
   }
 
   @Test
+  public void testTermsCollectionSubset_order() {
+    testTermsCollectionSubsetOrder();
+  }
+
+  @Test
   public void testTermsCollectionGreaterSize() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VIRTUAL_FIELD).setSize(10).build();
     SearchResponse response = doQuery(terms);
@@ -101,6 +122,11 @@
   }
 
   @Test
+  public void testTermsCollectionGreaterSize_order() {
+    testTermsCollectionGreaterSizeOrder();
+  }
+
+  @Test
   public void testTermsRange() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VIRTUAL_FIELD).setSize(3).build();
     SearchResponse response = doRangeQuery(terms);
@@ -114,11 +140,21 @@
   }
 
   @Test
+  public void testTermsRange_order() {
+    testTermsRangeOrder();
+  }
+
+  @Test
   public void testTermsRangeSubset() {
     TermsCollector terms = TermsCollector.newBuilder().setField(VIRTUAL_FIELD).setSize(1).build();
     SearchResponse response = doRangeQuery(terms);
     assertResponse(
         response, 3, 1, 6, new ExpectedValues(new HashSet<>(Collections.singletonList("2.5")), 4));
+  }
+
+  @Test
+  public void testTermsRangeSubset_order() {
+    testTermsRangeSubsetOrder();
   }
 
   @Test
@@ -210,4 +246,21 @@
     SearchResponse response = doNestedQuery(terms);
     assertNestedResult(response);
   }
+
+  @Test
+  public void testNestedCollector_asc() {
+    TermsCollector terms =
+        TermsCollector.newBuilder()
+            .setField(VALUE_FIELD)
+            .setOrder(BucketOrder.newBuilder().setKey(COUNT).setOrder(OrderType.ASC).build())
+            .setSize(3)
+            .build();
+    SearchResponse response = doNestedQuery(terms);
+    assertNestedResult(response);
+  }
+
+  @Test
+  public void testOrderByNestedCollector() {
+    super.testOrderByNestedCollector();
+  }
 }