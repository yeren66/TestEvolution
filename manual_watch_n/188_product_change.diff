--- 
+++ 
@@ -610,145 +610,6 @@
     }
 
     /**
-     * Sort an array in ascending order in place and perform the same reordering
-     * of entries on other arrays. For example, if
-     * {@code x = [3, 1, 2], y = [1, 2, 3]} and {@code z = [0, 5, 7]}, then
-     * {@code sortInPlace(x, y, z)} will update {@code x} to {@code [1, 2, 3]},
-     * {@code y} to {@code [2, 3, 1]} and {@code z} to {@code [5, 7, 0]}.
-     *
-     * @param x Array to be sorted and used as a pattern for permutation
-     * of the other arrays.
-     * @param yList Set of arrays whose permutations of entries will follow
-     * those performed on {@code x}.
-     * @throws DimensionMismatchException if any {@code y} is not the same
-     * size as {@code x}.
-     * @throws NullArgumentException if {@code x} or any {@code y} is null.
-     * @since 3.0
-     */
-    public static void sortInPlace(double[] x, double[] ... yList) {
-        sortInPlace(x, OrderDirection.INCREASING, yList);
-    }
-
-    /**
-     * Helper data structure holding a (double, integer) pair.
-     */
-    private static class PairDoubleInteger {
-        /** Key */
-        private final double key;
-        /** Value */
-        private final int value;
-
-        /**
-         * @param key Key.
-         * @param value Value.
-         */
-        PairDoubleInteger(double key, int value) {
-            this.key = key;
-            this.value = value;
-        }
-
-        /** @return the key. */
-        public double getKey() {
-            return key;
-        }
-
-        /** @return the value. */
-        public int getValue() {
-            return value;
-        }
-    }
-
-    /**
-     * Sort an array in place and perform the same reordering of entries on
-     * other arrays.  This method works the same as the other
-     * {@link #sortInPlace(double[], double[][]) sortInPlace} method, but
-     * allows the order of the sort to be provided in the {@code dir}
-     * parameter.
-     *
-     * @param x Array to be sorted and used as a pattern for permutation
-     * of the other arrays.
-     * @param dir Order direction.
-     * @param yList Set of arrays whose permutations of entries will follow
-     * those performed on {@code x}.
-     * @throws DimensionMismatchException if any {@code y} is not the same
-     * size as {@code x}.
-     * @throws NullArgumentException if {@code x} or any {@code y} is null
-     * @since 3.0
-     */
-    public static void sortInPlace(double[] x,
-                                   final OrderDirection dir,
-                                   double[] ... yList) {
-        // Consistency checks.
-        if (x == null) {
-            throw new NullArgumentException();
-        }
-
-        final int yListLen = yList.length;
-        final int len = x.length;
-
-        for (int j = 0; j < yListLen; j++) {
-            final double[] y = yList[j];
-            if (y == null) {
-                throw new NullArgumentException();
-            }
-            if (y.length != len) {
-                throw new DimensionMismatchException(y.length, len);
-            }
-        }
-
-        // Associate each abscissa "x[i]" with its index "i".
-        final List<PairDoubleInteger> list
-            = new ArrayList<>(len);
-        for (int i = 0; i < len; i++) {
-            list.add(new PairDoubleInteger(x[i], i));
-        }
-
-        // Create comparators for increasing and decreasing orders.
-        final Comparator<PairDoubleInteger> comp
-            = dir == MathArrays.OrderDirection.INCREASING ?
-            new Comparator<PairDoubleInteger>() {
-            /** {@inheritDoc} */
-            @Override
-            public int compare(PairDoubleInteger o1,
-                               PairDoubleInteger o2) {
-                return Double.compare(o1.getKey(), o2.getKey());
-            }
-        } : new Comparator<PairDoubleInteger>() {
-            /** {@inheritDoc} */
-            @Override
-            public int compare(PairDoubleInteger o1,
-                               PairDoubleInteger o2) {
-                return Double.compare(o2.getKey(), o1.getKey());
-            }
-        };
-
-        // Sort.
-        Collections.sort(list, comp);
-
-        // Modify the original array so that its elements are in
-        // the prescribed order.
-        // Retrieve indices of original locations.
-        final int[] indices = new int[len];
-        for (int i = 0; i < len; i++) {
-            final PairDoubleInteger e = list.get(i);
-            x[i] = e.getKey();
-            indices[i] = e.getValue();
-        }
-
-        // In each of the associated arrays, move the
-        // elements to their new location.
-        for (int j = 0; j < yListLen; j++) {
-            // Input array will be modified in place.
-            final double[] yInPlace = yList[j];
-            final double[] yOrig = yInPlace.clone();
-
-            for (int i = 0; i < len; i++) {
-                yInPlace[i] = yOrig[indices[i]];
-            }
-        }
-    }
-
-    /**
      * Returns true iff both arguments are null or have same dimensions and all
      * their elements are equal as defined by
      * {@link Precision#equals(float,float)}.