--- 
+++ 
@@ -49,110 +49,6 @@
     }
 
     /**
-     * Wraps an instance of the JDK's {@link Random} class.
-     * The actual generation of random numbers will be delegated to that
-     * instance.
-     * <p>
-     * If cryptographically secure data is required, one can use this
-     * factory method, with an instance of the {@link java.security.SecureRandom}
-     * class as the argument.
-     * Note that data generation will be much slower in this case.
-     * </p>
-     *
-     * @param rng Underlying generator. Reference is copied so the RNG
-     * is shared with the caller.
-     * @return a {@link DataGenerator data generator}.
-     */
-    public static DataGenerator createDataGenerator(final Random rng) {
-        return createDataGenerator(asUniformRandomProvider(rng));
-    }
-
-    /**
-     * Wraps a {@link Random} instance.
-     *
-     * @param rng JDK {@link Random} instance to which the random number
-     * generation is delegated. Reference is copied so the RNG is shared
-     * with the caller.
-     * @return a {@link UniformRandomProvider} instance.
-     */
-    public static UniformRandomProvider asUniformRandomProvider(final Random rng) {
-        return new UniformRandomProvider() {
-            /** {@inheritDoc} */
-            @Override
-            public void nextBytes(byte[] bytes) {
-                rng.nextBytes(bytes);
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public void nextBytes(byte[] bytes,
-                                  int start,
-                                  int len) {
-                final byte[] reduced = new byte[len];
-                rng.nextBytes(reduced);
-                System.arraycopy(reduced, 0, bytes, start, len);
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public int nextInt() {
-                return rng.nextInt();
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public int nextInt(int n) {
-                if (n <= 0) {
-                    throw new NotStrictlyPositiveException(n);
-                }
-                return rng.nextInt(n);
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public long nextLong() {
-                return rng.nextLong();
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public long nextLong(long n) {
-                // Code copied from "o.a.c.m.rng.internal.BaseProvider".
-
-                if (n > 0) {
-                    long bits;
-                    long val;
-                    do {
-                        bits = rng.nextLong() >>> 1;
-                        val  = bits % n;
-                    } while (bits - val + (n - 1) < 0);
-                    return val;
-                }
-
-                throw new NotStrictlyPositiveException(n);
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public boolean nextBoolean() {
-                return rng.nextBoolean();
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public float nextFloat() {
-                return rng.nextFloat();
-            }
-
-            /** {@inheritDoc} */
-            @Override
-            public double nextDouble() {
-                return rng.nextDouble();
-            }
-        };
-    }
-
-    /**
      * Various random data generation routines.
      */
     public static class DataGenerator {